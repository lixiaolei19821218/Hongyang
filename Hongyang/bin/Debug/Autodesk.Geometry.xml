<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autodesk.Geometry</name>
    </assembly>
    <members>
        <member name="T:Autodesk.Geometry.Degree">
            <summary>
            Structure encapsulating all operations for manipulating angles in degrees.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Degree._angle">
            <summary>
            This is the actual value of the angle
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Degree.#ctor(System.Double)">
            <summary>
            Constructs a Degree structure and initialises the angle to the specified number of degrees
            </summary>
            <param name="angle">Angle in degrees.</param>
        </member>
        <member name="P:Autodesk.Geometry.Degree.Value">
            <summary>
            Value of the angle in degrees.
            </summary>
            <value>The angle in degrees.</value>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_UnaryNegation(Autodesk.Geometry.Degree)">
            <summary>
            Negates the current value of the angle.
            </summary>
            <param name="right">Degree object to negate.</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Subtraction(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Subtract one Degree object from another.
            </summary>
            <param name="left">Degree object from which to subtract (minuend).</param>
            <param name="right">Degree object to subtract (subtrahend).</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Addition(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Add one Degree object to another.
            </summary>
            <param name="left">First of two Degree objects to be summed.</param>
            <param name="right">Second of two Degree objects to be summed.</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Division(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Division of one Degree object by another.
            </summary>
            <param name="left">Degree object to be divided (dividend).</param>
            <param name="right">Degree object to divide with (divisor).</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Division(Autodesk.Geometry.Degree,System.Double)">
            <summary>
            Division of one Degree object by a double.
            </summary>
            <param name="left">Degree object to be divided (dividend).</param>
            <param name="right">Double to divide by (divisor).</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Multiply(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Multiplication of two degrees objects.
            </summary>
            <param name="left">First of two Degree objects to be multiplied (multiplicand).</param>
            <param name="right">Second of two Degree objects to be multiplied (multiplier).</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Multiply(System.Double,Autodesk.Geometry.Degree)">
            <summary>
            Multiplication of a double by a Degree object.
            </summary>
            <param name="left">First of two parameters to multiply (multiplicand).</param>
            <param name="right">Second of two parameters to multiply (multiplier).</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Multiply(Autodesk.Geometry.Degree,System.Double)">
            <summary>
            Multiplication of a Degree object by a double.
            </summary>
            <param name="left">First of two parameters to multiply (multiplicand).</param>
            <param name="right">Second of two parameters to multiply (multiplier).</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_LessThan(Autodesk.Geometry.Degree,System.Double)">
            <summary>
            Determine whether the left-hand Degree object is less than the right hand double.
            </summary>
            <param name="left">First of two parameters to compare.</param>
            <param name="right">Second of two parameters to compare.</param>
            <returns>Returns True if the Degree objects is less than the double; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_GreaterThan(Autodesk.Geometry.Degree,System.Double)">
            <summary>
            Determine whether the left-hand Degree object is greater than the right hand double.
            </summary>
            <param name="left">First of two parameters to compare.</param>
            <param name="right">Second of two parameters to compare.</param>
            <returns>Returns True if the Degree objects is greater than the double; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_LessThanOrEqual(Autodesk.Geometry.Degree,System.Double)">
            <summary>
            Determine whether the left-hand Degree object is less than or equal to the right hand double.
            </summary>
            <param name="left">First of two parameters to compare.</param>
            <param name="right">Second of two parameters to compare.</param>
            <returns>Returns True if the Degree objects is less than or equal to the double; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_GreaterThanOrEqual(Autodesk.Geometry.Degree,System.Double)">
            <summary>
            Determine whether the left-hand Degree object is greater than or equal to the right hand double.
            </summary>
            <param name="left">First of two parameters to compare.</param>
            <param name="right">Second of two parameters to compare.</param>
            <returns>Returns True if the Degree objects is greater than or equal to the double; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_LessThan(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Determine whether the left-hand Degree object is less than the right.
            </summary>
            <param name="left">First of two Degree objects to compare.</param>
            <param name="right">Second of two Degree objects to compare.</param>
            <returns>Returns True if the left-hand Degree object is less than the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_GreaterThan(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Determine whether the left-hand Degree object is greater than the right.
            </summary>
            <param name="left">First of two Degree objects to compare.</param>
            <param name="right">Second of two Degree objects to compare.</param>
            <returns>Returns True if the left-hand Degree object is greater than the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_LessThanOrEqual(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Determine whether the left-hand Degree object is less than or equal to the right.
            </summary>
            <param name="left">First of two Degree objects to compare.</param>
            <param name="right">Second of two Degree objects to compare.</param>
            <returns>Returns True if the left-hand Degree object is less than or equal to the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_GreaterThanOrEqual(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Determine whether the left-hand Degree object is greater than or equal to the right.
            </summary>
            <param name="left">First of two Degree objects to compare.</param>
            <param name="right">Second of two Degree objects to compare.</param>
            <returns>Returns True if the left-hand Degree object is greater than or equal to the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Equality(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Determine whether two Degree objects are equal.
            </summary>
            <param name="left">First of two Degree objects to compare.</param>
            <param name="right">Second of two Degree objects to compare.</param>
            <returns>Returns True if the two Degree objects are equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Inequality(Autodesk.Geometry.Degree,Autodesk.Geometry.Degree)">
            <summary>
            Determine whether two Degree objects are not equal.
            </summary>
            <param name="left">First of two Degree objects to compare.</param>
            <param name="right">Second of two Degree objects to compare.</param>
            <returns>Returns True if the two Degree objects are unquivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Implicit(Autodesk.Geometry.Degree)~System.Double">
            <summary>
            Cast a Degree object to double.
            </summary>
            <param name="left">Degree object to cast.</param>
            <returns>Double representation of the Degree object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Explicit(Autodesk.Geometry.Degree)~System.Single">
            <summary>
            Cast a Degree object to int. Note: There is an implicit loss of precision with this operation.
            </summary>
            <param name="left">Degree object to cast.</param>
            <returns>Integer representation of the Degree object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Explicit(Autodesk.Geometry.Degree)~System.Decimal">
            <summary>
            Cast a Degree object to decimal.
            </summary>
            <param name="left">Degree object to cast.</param>
            <returns>Decimal representation of the Degree object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Implicit(Autodesk.Geometry.Radian)~Autodesk.Geometry.Degree">
            <summary>
            Cast a Radian object to a Degree object.
            </summary>
            <param name="left">Radian object to cast.</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.op_Implicit(System.Double)~Autodesk.Geometry.Degree">
            <summary>
            Cast a double to a Degree object.
            </summary>
            <param name="left">Double to cast.</param>
            <returns>New Degree object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.ToString">
            <summary>
            Returns a string representation of the value in degrees.
            </summary>
            <returns>String representation of the value in degrees.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.ToString(System.String)">
            <summary>
            Returns a formatted string representation of the value in degrees.
            </summary>
            <param name="format">Standard numeric format specifier.</param>
            <returns>String representation of the value in degrees.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.ToString(System.IFormatProvider)">
            <summary>
            Returns the numeric value of this instance in its equivalent string representation using the specified culture-specific format information.
            </summary>
            <param name="fp">Custom object implementing the IFormatProvider interface.</param>
            <returns>String representation of the value in degrees.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the numeric value of this instance in its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">Standard numeric format specifier.</param>
            <param name="fp">Custom object implementing the IFormatProvider interface.</param>
            <returns>String representation of the value in degrees.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.Equals(System.Object)">
            <summary>
            Returns True if the magnitude of this object is equivalent to that of the specified object.
            If the specified object is neither of type Degree or Radian, false will be returned.
            </summary>
            <param name="obj">Object with which to compare this.</param>
            <returns>True if the magnitudes of this and the specified object are equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.Equals(System.Object,System.Int32)">
            <summary>
            Returns True if the magnitude of this object is equivalent to that of the specified object to the specified number of decimal places.
            If the specified object is neither of type Degree or Radian, false will be returned.
            </summary>
            <param name="obj">Object with which to compare this.</param>
            <param name="nDecPts">Number of decimal places to compare.</param>
            <returns>True if the magnitudes of this and the specified object are considered equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Degree.CompareTo(System.Object)">
            <summary>
            Determines whether the passed argument is before or after this one in logical sort order.
            </summary>
            <param name="obj">Passed object to compare. Must be of type Degree.</param>
            <returns>
            Integer detailing the relative ordering of the two objects in the sort order: If zero, both
            occur in the same position; negative and this object preceeds the passed argument and, if positive,
            this object comes after the passed argument.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the object to compare is not of type Degree.</exception>
        </member>
        <member name="T:Autodesk.Geometry.Radian">
            <summary>
            Structure encapsulating all operations for manipulating angles in radians.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Radian._angle">
            <summary>
            This is the actual angle in radians
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Radian.#ctor(System.Double)">
            <summary>
            Constructs a Radian structure and initialises the angle to the specified number of radians.
            </summary>
            <param name="angle">Initial angle.</param>
        </member>
        <member name="P:Autodesk.Geometry.Radian.Value">
            <summary>
            Value of the angle in radians.
            </summary>
            <value>The angle in radians.</value>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Addition(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Add one Radian object to another.
            </summary>
            <param name="left">First of two Radian objects to be summed.</param>
            <param name="right">Second of two Radian objects to be summed.</param>
            <returns>New Radian object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Subtraction(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Subtract one Radian object from another.
            </summary>
            <param name="left">Radian object from which to subtract (minuend).</param>
            <param name="right">Radian object to subtract (subtrahend).</param>
            <returns>New Radian object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Multiply(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Multiplication of two Radian objects.
            </summary>
            <param name="left">First of two Radian objects to be multiplied (multiplicand).</param>
            <param name="right">Second of two Radian objects to be multiplied (multiplier).</param>
            <returns>New Radian object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Multiply(System.Double,Autodesk.Geometry.Radian)">
            <summary>
            Multiplication of a double by a Radian object.
            </summary>
            <param name="left">First of two parameters to multiply (multiplicand).</param>
            <param name="right">Second of two parameters to multiply (multiplier).</param>
            <returns>New Radian object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Multiply(Autodesk.Geometry.Radian,System.Double)">
            <summary>
            Multiplication of a Radian object by a double.
            </summary>
            <param name="left">First of two parameters to multiply (multiplicand).</param>
            <param name="right">Second of two parameters to multiply (multiplier).</param>
            <returns>New Radian object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Division(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Division of one Radian object by another.
            </summary>
            <param name="left">Radian object to be divided (dividend).</param>
            <param name="right">Radian object to divide with (divisor).</param>
            <returns>New Radian object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Division(Autodesk.Geometry.Radian,System.Double)">
            <summary>
            Division of one Radian object by a double.
            </summary>
            <param name="left">Radian object to be divided (dividend).</param>
            <param name="right">Double to divide by (divisor).</param>
            <returns>New Radian object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_UnaryNegation(Autodesk.Geometry.Radian)">
            <summary>
            Negates the current value of the angle.
            </summary>
            <param name="right">Radian object to negate.</param>
            <returns>New Radian object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_LessThan(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Determine whether the left-hand Radian object is less than the right.
            </summary>
            <param name="left">First of two Radian objects to compare.</param>
            <param name="right">Second of two Radian objects to compare.</param>
            <returns>Returns True if the left-hand Radian object is less than the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_GreaterThan(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Determine whether the left-hand Radian object is greater than the right.
            </summary>
            <param name="left">First of two Radian objects to compare.</param>
            <param name="right">Second of two Radian objects to compare.</param>
            <returns>Returns True if the left-hand Radian object is greater than the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_LessThanOrEqual(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Determine whether the left-hand Radian object is less than or equal to the right.
            </summary>
            <param name="left">First of two Radian objects to compare.</param>
            <param name="right">Second of two Radian objects to compare.</param>
            <returns>Returns True if the left-hand Radian object is less than or equal to the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_GreaterThanOrEqual(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Determine whether the left-hand Radian object is greater than or equal to the right.
            </summary>
            <param name="left">First of two Radian objects to compare.</param>
            <param name="right">Second of two Radian objects to compare.</param>
            <returns>Returns True if the left-hand Radian object is greater than or equal to the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Equality(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Determine whether two Radian objects are equal.
            </summary>
            <param name="left">First of two Radian objects to compare.</param>
            <param name="right">Second of two Radian objects to compare.</param>
            <returns>Returns True if the two Radian objects are equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Inequality(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            Determine whether two Radian objects are not equal.
            </summary>
            <param name="left">First of two Radian objects to compare.</param>
            <param name="right">Second of two Radian objects to compare.</param>
            <returns>Returns True if the two Radian objects are unquivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Addition(Autodesk.Geometry.Radian,System.String)">
            <summary>
            Concatenates the string representation of a Radian object with a string.
            </summary>
            <param name="left">Radian object with which to concatenate a string.</param>
            <param name="right">String to concatenate .</param>
            <returns>Returns a string containing the result of the concatenation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Addition(System.String,Autodesk.Geometry.Radian)">
            <summary>
            Concatenates a string with the string representation of a Radian object.
            </summary>
            <param name="left">String with which to concatenate a Radian object.</param>
            <param name="right">Radian object to concatenate .</param>
            <returns>Returns a string containing the result of the concatenation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Implicit(Autodesk.Geometry.Radian)~System.Double">
            <summary>
            Cast a Radian object to double.
            </summary>
            <param name="left">Radian object to cast.</param>
            <returns>Double representation of the Radian object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Explicit(Autodesk.Geometry.Radian)~System.Single">
            <summary>
            Cast a Radian object to Single.
            </summary>
            <param name="left">Radian object to cast.</param>
            <returns>Single representation of the Radian object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Explicit(Autodesk.Geometry.Radian)~System.Decimal">
            <summary>
            Cast a Radian object to Decimal.
            </summary>
            <param name="left">Radian object to cast.</param>
            <returns>Decimal representation of the Radian object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Implicit(Autodesk.Geometry.Degree)~Autodesk.Geometry.Radian">
            <summary>
            Cast a Degree object to a Radian object.
            </summary>
            <param name="left">Degree object to cast.</param>
            <returns>Radian representation of the Degree object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.op_Implicit(System.Double)~Autodesk.Geometry.Radian">
            <summary>
            Cast a double to a Radian object.
            </summary>
            <param name="left">Double to cast.</param>
            <returns>New Radian object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.ToString">
            <summary>
            Returns a string representation of the value in radians.
            </summary>
            <returns>String representation of the value in radians.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.ToString(System.String)">
            <summary>
            Returns a formatted string representation of the value in radians.
            </summary>
            <param name="format">Standard numeric fornat specifier.</param>
            <returns>String representation of the value in radians.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.ToString(System.IFormatProvider)">
            <summary>
            Returns the numeric value of this instance in its equivalent string representation using the specified culture-specific format information.
            </summary>
            <param name="fp">Custom object implementing the IFormatProvider interface.</param>
            <returns>String representation of the value in radians.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the numeric value of this instance in its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">Standard numeric fornat specifier.</param>
            <param name="fp">Custom object implementing the IFormatProvider interface.</param>
            <returns>String representation of the value in radians.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.Equals(System.Object)">
            <summary>
            Returns True if the magnitude of this object is equivalent to that of the specified object.
            If the specified object is neither of type Degree or Radian, false will be returned.
            </summary>
            <param name="obj">Object with which to compare this.</param>
            <returns>True if the magnitudes of this and the specified object are equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.Equals(System.Object,System.Int32)">
            <summary>
            Returns True if the magnitude of this object is equivalent to that of the specified object to the specified number of decimal places.
            If the specified object is neither of type Degree or Radian, false will be returned.
            </summary>
            <param name="obj">Object with which to compare this.</param>
            <param name="nDecPts">Number of decimal places to compare.</param>
            <returns>True if the magnitudes of this and the specified object are considered equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Radian.CompareTo(System.Object)">
            <summary>
            Determines whether the passed argument is before or after this one in logical sort order.
            </summary>
            <param name="obj">Passed object to compare. Must be of type Radian.</param>
            <returns>
            Integer detailing the relative ordering of the two objects in the sort order: If zero, both
            occur in the same position; negative and this object preceeds the passed argument and, if positive,
            this object comes after the passed argument.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the object to compare is not of type Radian.</exception>
        </member>
        <member name="T:Autodesk.Geometry.Euler.Conventions">
            <summary>
            Euler angle conventions supported by Autodesk.Geometry.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.Euler.Angles">
            <summary>
            Constructs Euler rotational matrices.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.#ctor(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Euler.Conventions)">
            <summary>
            Constructs a Euler rotation matrix based on the specified angles and convention.
            </summary>
            <param name="alpha">First angle of rotation.</param>
            <param name="beta"> Second angle of rotation.</param>
            <param name="gamma">Third angle of rotation.</param>
            <param name="convention">Specifies the axes of rotation and the order in which rotations are performed about the axes.</param>
        </member>
        <member name="P:Autodesk.Geometry.Euler.Angles.Matrix">
            <summary>
            Euler rotational matrix.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Euler.Angles.MatrixInverse">
            <summary>
            The inverse of Euler rotational matrix.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.GetRotationsFromMatrixXYZ(System.Double[0:,0:])">
            <summary>
            Computes Euler angles from a MatrixXYZ.
            </summary>
            <returns>The rotation around z, the rotation around y and the rotation around x, by this order.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixXZX(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for XZX
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixXYX(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for XYX
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixYXY(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for YXY
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixYZY(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for YZY
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixZYZ(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for ZYZ
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixZXZ(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for ZXZ
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixXZY(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for XZY
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixXYZ(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for XYZ
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixYXZ(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for YXZ
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixYZX(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for YZX
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixZYX(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for ZYX
            </summary>
            <history>
            Who  When        Why
            ---  ----        ---
            lae  12/01/2009  Initial version
            </history>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.MatrixZXY(Autodesk.Geometry.Radian,Autodesk.Geometry.Radian,Autodesk.Geometry.Radian)">
            <summary>
            This operation sets the Matrix for ZXY
            </summary>
            <history>
            Who  When        Why
            ---  ----        ---
            lae  12/01/2009  Initial version
            </history>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.ApplyZRotation(System.Double[0:,0:]@,System.Double,System.Boolean)">
            <summary>
            Applies a rotation around the z-axis.
            </summary>
            <param name="rotationMatrix">The rotation matrix.</param>
            <param name="rotation">The rotation to apply around z-axis.</param>
            <param name="isInDegrees">True if the rotation is in degrees.</param>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.ApplyYRotation(System.Double[0:,0:]@,System.Double,System.Boolean)">
            <summary>
            Applies a rotation around the y-axis.
            </summary>
            <param name="rotationMatrix">The transformation matrix that will contain the result.</param>
            <param name="rotation">The rotation to apply around y-axis.</param>
            <param name="isInDegrees">True if the rotation is in degrees.</param>
        </member>
        <member name="M:Autodesk.Geometry.Euler.Angles.ApplyXRotation(System.Double[0:,0:]@,System.Double,System.Boolean)">
            <summary>
            Applies a rotation around the x-axis.
            </summary>
            <param name="rotationMatrix">The transformation matrix that will contain the result.</param>
            <param name="rotation">The rotation to apply around x-axis.</param>
            <param name="isInDegrees">True if the rotation is in degrees.</param>
        </member>
        <member name="T:Autodesk.Geometry.AsciiStlFileReader">
            <summary>
            Reads an ASCII STL file.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.AsciiStlFileReader.ReadFile(Autodesk.FileSystem.File,Autodesk.Geometry.IDMTModelFilter)">
            <summary>
            Reads an ASCII STL file filtered by a provided filter.
            </summary>
            <param name="file">The mesh file.</param>
            <param name="filter">The provided filtered.</param>
            <returns>The DMTModel that obeys to the filter condition.</returns>
        </member>
        <member name="T:Autodesk.Geometry.BoundingBox">
            <summary>
            Defines a three-dimensional bounding box.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.BoundingBox._minimumBounds">
            <summary>
            This is the minimum point of the bounding box
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.BoundingBox._maximumBounds">
            <summary>
            This is the maximum point of the bounding box
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.BoundingBox.#ctor">
            <summary>
            Constructs a maximally sized bounding box.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.BoundingBox.#ctor(Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Constructs a bounding box with the specified dimensions.
            </summary>
            <param name="minX">Minimum value in X.</param>
            <param name="maxX">Maximum value in X.</param>
            <param name="minY">Minimum value in Y.</param>
            <param name="maxY">Maximum value in Y.</param>
            <param name="minZ">Minimum value in Z.</param>
            <param name="maxZ">Maximum value in Z.</param>
        </member>
        <member name="M:Autodesk.Geometry.BoundingBox.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Constructs a bounding box with the specified dimensions.
            </summary>
            <param name="minimumBounds">Minimum values in X, Y and Z.</param>
            <param name="maximumBounds">Maximum values in X, Y and Z.</param>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.MinimumBounds">
            <summary>
            Minimum X, Y and Z bounds of the bounding box.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.MaximumBounds">
            <summary>
            Maximum X, Y and Z bounds of the bounding box.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.MinX">
            <summary>
            Minimum boundary in X.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.MaxX">
            <summary>
            Maximum boundary in X.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.MinY">
            <summary>
            Minimum boundary in Y.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.MaxY">
            <summary>
            Maximum boundary in Y.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.MinZ">
            <summary>
            Minimum boundary in Z.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.MaxZ">
            <summary>
            Maximum boundary in Z.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.XSize">
            <summary>
            Boundary extent in X.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.YSize">
            <summary>
            Boundary extent in Y.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.ZSize">
            <summary>
            Boundary extent in Z.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.VolumetricCentre">
            <summary>
            Volumetric centre of the bounding box.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.BoundingBox.Volume">
            <summary>
            Volume of bounding box.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.BoundingBox.Equals(System.Object)">
            <summary>
            Test whether this item is the same as the passed object
            </summary>
            <param name="obj">Item to compare against</param>
        </member>
        <member name="M:Autodesk.Geometry.BoundingBox.Merge(Autodesk.Geometry.BoundingBox,Autodesk.Geometry.BoundingBox)">
            <summary>
            Get the bounding box around two boxes.
            </summary>
            <param name="box1"></param>
            <param name="box2"></param>
            <returns>Returns the bounding box around two bounding boxes. If either box is Nothing, the other will be returned. If both boxes are Nothing, Nothing will be returned.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.BoundingBox.ToString">
            <summary>
            Returns a string representation of the BoundingBox
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.BoundingBox.Clone">
            <summary>
            Clones of the current BoundingBox.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.CubicBezier">
            <summary>
            Most important case in the family of bezier curves. Consists of four control points,
            the first and last of which are incident on the curve.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.CubicBezier.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Constructs a CubicBezier object with the specified parameters.
            </summary>
            <param name="startPoint">Curve starts here.</param>
            <param name="endPoint">Curve ends here.</param>
            <param name="controlPoint1">First control point.</param>
            <param name="controlPoint2">Second control point.</param>
            <remarks></remarks>
        </member>
        <member name="P:Autodesk.Geometry.CubicBezier.StartPoint">
            <summary>
            Start point.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.CubicBezier.EndPoint">
            <summary>
            End point.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.CubicBezier.StartControlPoint">
            <summary>
            First control point.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.CubicBezier.EndControlPoint">
            <summary>
            Second control point.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.CubicBezier.Position(System.Double)">
            <summary>
            Returns a point on the curve in t where 0 &lt;= t &lt;= 1
            </summary>
            <param name="t">Relative time parameter at which to calculate point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if t does not satisfy the condition: 0 &lt;= t &lt;= 1.</exception>
        </member>
        <member name="M:Autodesk.Geometry.CubicBezier.Tangent(System.Double,System.Boolean)">
            <summary>
            Returns the tangent at a position on the Bezier Curve in t where 0 &lt;= t &lt;= 1.
            The tangent is normalized by default.
            </summary>
            <param name="t">Relative time parameter specifying position at which tangent is to be calculated.</param>
            <param name="normalize">If True, tangent will be normalised. False otherwise.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if t does not satisfy the condition: 0 &lt;= t &lt;= 1.</exception>
        </member>
        <member name="M:Autodesk.Geometry.CubicBezier.Curvature(System.Double)">
            <summary>
            Returns vector representing radius of curvature at the specified position on the curve in t where 0 &lt;= t &lt;= 1.
            </summary>
            <param name="t">Relative time parameter specifying position at which tangent is to be calculated.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if t does not satisfy the condition: 0 &lt;= t &lt;= 1.</exception>
        </member>
        <member name="M:Autodesk.Geometry.CubicBezier.FindNearestPositionOnSpan(Autodesk.Geometry.Point@,System.Collections.Generic.List{System.Int32}@,System.Double@)">
            <summary>
            Calculates the value of t, where 0 &lt;= t &lt;= 1, at which occurs the point on the
            bezier curve closest to a given point in space.
            </summary>
            <param name="pointInSpace">Point in space at which to determine the bezier closest approach. </param>
            <param name="nIterationsList">List of iteration coefficients.</param>
            <param name="distanceToNearestPosition">Actual distance from curve at t to point in space. </param>
            <returns>Value of t at closest approach.</returns>
            <remarks>
            Algorithm progressively reduces granularity of result by first identifying a span t/n of closest approach,
            where n is nIterationList[0], and then refining the outcome with successive decomposition phases, the number of which is the
            number of integers in nIterationList.
            </remarks>
        </member>
        <member name="M:Autodesk.Geometry.CubicBezier.IsSpanStraight(System.Boolean)">
            <summary>
            Determines whether the Bezier curve is straight.
            Occurs when all points along it are colinear.
            </summary>
            <param name="isAllowOutsideRange">If True, control points do not have to fall between start and end points.</param>
        </member>
        <member name="M:Autodesk.Geometry.CubicBezier.IsPointsColinear(Autodesk.Geometry.Point@,Autodesk.Geometry.Point@,Autodesk.Geometry.Point@,System.Boolean)">
            <summary>
            Checks whether a point is colinear with two other points
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.CubicBezier.GetCurvatureRatio">
            <summary>
            The curvature ratio is distance(C0--->C1--->C2--->C3)/distance(C0---->C3)
            A bezier curve is always within the boundary of its control points
            A curvature ratio of 1 corresponds to a straight line
            A large curvature ratio means that the bezier curve has a large curvature
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.CubicBezier.ApproximateSpanLengthUsingCurvatureRatio">
            <summary>
            Approximates the length of a span as
            (distance(C0--->C3) + distance(C0--->C1 + C1--->C2 + C2--->C3))/2
            This is accurate for splines that are almost linear
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.BinaryStlFileReader">
            <summary>
            Reads a binary STL file.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.BinaryStlFileReader.ReadFile(Autodesk.FileSystem.File,Autodesk.Geometry.IDMTModelFilter)">
            <summary>
            Reads a binary STL file filtered by a provided filter.
            </summary>
            <param name="file">The mesh file.</param>
            <param name="filter">The provided filtered.</param>
            <returns>The DMTModel that obeys to the filter condition.</returns>
        </member>
        <member name="T:Autodesk.Geometry.DMTFileReader">
            <summary>
            Reads a DMT file.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTFileReader.ReadFile(Autodesk.FileSystem.File,Autodesk.Geometry.IDMTModelFilter)">
            <summary>
            Reads a DMT file filtered by a provided filter.
            </summary>
            <param name="file">The mesh file.</param>
            <param name="filter">The provided filtered.</param>
            <returns>The DMTModel that obeys to the filter condition.</returns>
        </member>
        <member name="T:Autodesk.Geometry.BinaryStlFileWriter">
            <summary>
            Writes a STL binary file.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.BinaryStlFileWriter.WriteFile(Autodesk.Geometry.DMTModel,Autodesk.FileSystem.File)">
            <summary>
            Writes the model to a binary STL file.
            </summary>
            <param name="model">The DMTModel to write.</param>
            <param name="file">The file to write to.</param>
        </member>
        <member name="T:Autodesk.Geometry.DMTModelFilterByNone">
            <summary>
            Allows to read a DMTModel without filtering it.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelFilterByNone.CanAddTriangle(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Checks if a triangle can be added to the DMTModel.
            </summary>
            <param name="vertex1">The 1st triangle vertex.</param>
            <param name="vertex2">The 2nd triangle vertex.</param>
            <param name="vertex3">The 3rd triangle vertex.</param>
            <returns>Returns always true.</returns>
        </member>
        <member name="T:Autodesk.Geometry.DMTModelReader">
            <summary>
            Reads a mesh file.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelReader.ReadFile(Autodesk.FileSystem.File)">
            <summary>
            Reads a mesh file.
            </summary>
            <param name="file">The mesh file.</param>
            <returns>The DMTModel that represents the mesh file.</returns>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelReader.ReadFile(Autodesk.FileSystem.File,Autodesk.Geometry.IDMTModelFilter)">
            <summary>
            Reads a mesh file filtered by filter.
            </summary>
            <param name="file">The mesh file.</param>
            <param name="filter">The filter to filter by.</param>
            <returns>The DMTModel that represents the mesh that obeys to the filter condition.</returns>
            <exception cref="T:Autodesk.Geometry.DMTFileException">
            Thrown for any of the following reasons:<br></br><br></br>
            Specified file does not exist.<br></br>File format is unsupported.<br></br>File contains no triangle blocks.<br></br>
            File contains no vertices.<br></br>File contains no triangles.<br></br>Block version does not match file version.
            </exception>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelReader.ReadFile(Autodesk.FileSystem.File,Autodesk.Geometry.IDMTModelFilter,Autodesk.Geometry.DMTModel@)">
            <summary>
            Reads a mesh file filtered by filter.
            </summary>
            <param name="file">The mesh file.</param>
            <param name="filter">The filter to filter by.</param>
            <param name="excludedModel">The DMTModel that doesn't obey to the filter condition.</param>
            <returns>The DMTModel that obeys to the filter condition.</returns>
            <exception cref="T:Autodesk.Geometry.DMTFileException">
            Thrown for any of the following reasons:<br></br><br></br>
            Specified file does not exist.<br></br>File format is unsupported.<br></br>File contains no triangle blocks.<br></br>
            File contains no vertices.<br></br>File contains no triangles.<br></br>Block version does not match file version.
            </exception>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelReader.AppendFile(Autodesk.Geometry.DMTModel,Autodesk.FileSystem.File)">
            <summary>
            Appends the contents of the specified DMT file to the model.
            </summary>
            <param name="dmtModel">The DMTModel to append to.</param>
            <param name="file">Path and filename of the DMT model.</param>
            <exception cref="T:Autodesk.Geometry.DMTFileException">
            Thrown for any of the following reasons:<br></br><br></br>
            Specified file does not exist.<br></br>File format is unsupported.<br></br>File contains no triangle blocks.<br></br>
            File contains no vertices.<br></br>File contains no triangles.<br></br>Block version does not match file version.
            </exception>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelReader.AppendFile(Autodesk.Geometry.DMTModel,Autodesk.FileSystem.File,Autodesk.Geometry.IDMTModelFilter)">
            <summary>
            Appends the contents of the specified DMT file that obeys to a specified filter to the existing model.
            </summary>
            <param name="dmtModel">The DMTModel to append to.</param>
            <param name="file">Path and filename of the DMT model.</param>
            <param name="filter">The filterto filter by.</param>
            <exception cref="T:Autodesk.Geometry.DMTFileException">
            Thrown for any of the following reasons:<br></br><br></br>
            Specified file does not exist.<br></br>File format is unsupported.<br></br>File contains no triangle blocks.<br></br>
            File contains no vertices.<br></br>File contains no triangles.<br></br>Block version does not match file version.
            </exception>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelReader.AppendFile(Autodesk.Geometry.DMTModel,Autodesk.FileSystem.File,Autodesk.Geometry.IDMTModelFilter,Autodesk.Geometry.DMTModel@)">
            <summary>
            Appends the contents of the specified DMT file that obeys to a specified filter to the existing model.
            </summary>
            <param name="dmtModel">The DMTModel to append to.</param>
            <param name="file">Path and filename of the DMT model.</param>
            <param name="filter">The filterto filter by.</param>
            <param name="excludedModel">The DMTModel that doesn't obey to the filter condition.</param>
            <exception cref="T:Autodesk.Geometry.DMTFileException">
            Thrown for any of the following reasons:<br></br><br></br>
            Specified file does not exist.<br></br>File format is unsupported.<br></br>File contains no triangle blocks.<br></br>
            File contains no vertices.<br></br>File contains no triangles.<br></br>Block version does not match file version.
            </exception>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelReader.AppendSTLFile(Autodesk.Geometry.DMTModel,Autodesk.FileSystem.File,Autodesk.Geometry.IDMTModelFilter,Autodesk.Geometry.DMTModel@)">
            <summary>
            Appends the contents of the specified STL <paramref name="file"/> to the model.
            </summary>
            <param name="file">Path and filename of the STL model.</param>
        </member>
        <member name="T:Autodesk.Geometry.DMTFileWriter">
            <summary>
            Writes a DMT file.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTFileWriter.WriteFile(Autodesk.Geometry.DMTModel,Autodesk.FileSystem.File)">
            <summary>
            Writes the model to a DMT file.
            </summary>
            <param name="model">The DMTModel to write.</param>
            <param name="file">The file to write to.</param>
        </member>
        <member name="T:Autodesk.Geometry.DMTModelWriter">
            <summary>
            Writes a DMTModel model to a file.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelWriter.WriteFile(Autodesk.Geometry.DMTModel,Autodesk.FileSystem.File)">
            <summary>
            Write the contents of the model into the specified file. If the provided file is a DMT file, it will use the DMT file writer. If the provided file is a STL file, it will use a STL file writer.
            </summary>
            <param name="dmtModel">The DMTModel to write.</param>
            <param name="file">Destination file.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelWriter.WriteToDMTFile(Autodesk.Geometry.DMTModel,Autodesk.FileSystem.File)">
            <summary>
            Writes the contents of the model to the specified DMT <paramref name="file"/>.
            </summary>
            <param name="dmtModel">The DMTModel to write.</param>
            <param name="file">Destination file.</param>
            <exception cref="T:Autodesk.Geometry.DMTFileException">
            Thrown for any of the following reasons:<br></br><br></br>
            The model contains no blocks.<br></br>The model contains no vertices.<br></br>The model contains no triangles.
            </exception>
        </member>
        <member name="M:Autodesk.Geometry.DMTModelWriter.WriteToSTLFile(Autodesk.Geometry.DMTModel,Autodesk.FileSystem.File)">
            <summary>
            Writes the contents of the model to the specified STL <paramref name="file"/>.
            </summary>
            <param name="dmtModel">The DMTModel to write.</param>
            <param name="file">Destination file.</param>
        </member>
        <member name="T:Autodesk.Geometry.IDMTModelFilter">
            <summary>
            Allows to apply a filter for a DMTModel.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.IDMTModelFilter.CanAddTriangle(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Checks if a triangle can be added to the DMTModel.
            </summary>
            <param name="vertex1">The 1st triangle vertex.</param>
            <param name="vertex2">The 2nd triangle vertex.</param>
            <param name="vertex3">The 3rd triangle vertex.</param>
            <returns>Returns true if triangle obeys to the filter conditions, returns false otherwise.</returns>
        </member>
        <member name="T:Autodesk.Geometry.DMTModel">
            <summary>
            Handles the reading and writing of DMT files and facilitates the manipulation of triangles
            therein.
            </summary>
            <remarks>
            A DMT Model contains many triangle blocks, with each block containing many vertices and triangles.
            Each vertex has a position, may have a normal and contains a list of indices referencing
            the triangles that connect to it.
            Each triangle has three indices referencing the vertices that comprise it.
            </remarks>
        </member>
        <member name="F:Autodesk.Geometry.DMTModel.ZONE_DENSITY_DEFAULT">
            <summary>
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Autodesk.Geometry.DMTModel._zoneDensity">
            <summary>
            Granularity of vertex fencing.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:Autodesk.Geometry.DMTModel._blocks">
            <summary>
            This is the list of triangle blocks that make up the <see cref="T:Autodesk.Geometry.DMTModel"/>.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTModel._zones">
            <summary>
            This is the list of triangle zones within the <see cref="T:Autodesk.Geometry.DMTModel"/>. These are used during
            point projection.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTModel._numberOfZones">
            <summary>
            This is the total number of zones.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.#ctor">
            <summary>
            Constructs an empty <see cref="T:Autodesk.Geometry.DMTModel"/> and initialises an empty list of blocks.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTModel.Zones">
            <summary>
            This is the list of triangle zones within the <see cref="T:Autodesk.Geometry.DMTModel"/>. These are used during
            point projection.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Scale(System.Double)">
            <summary>
            Uses the specified scalar to scale the model about the origin.
            </summary>
            <param name="scalar">Scaling factor.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Scale(Autodesk.Geometry.Point,System.Double)">
            <summary>
            Uses the specified scalar to scale the model about the specified origin.
            </summary>
            <param name="origin">Origin about which to scale the model.</param>
            <param name="scalar">Scaling factor.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Uses the specified scalars to scale the model about the origin.
            </summary>
            <param name="scalarX">The factor by which to scale in X.</param>
            <param name="scalarY">The factor by which to scale in Y.</param>
            <param name="scalarZ">The factor by which to scale in Z.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Scale(Autodesk.Geometry.Point,System.Double,System.Double,System.Double)">
            <summary>
            Uses the specified scalars to scale the model about the specified origin origin.
            </summary>
            <param name="origin">The origin about which to scale.</param>
            <param name="scalarX">The factor by which to scale in X.</param>
            <param name="scalarY">The factor by which to scale in Y.</param>
            <param name="scalarZ">The factor by which to scale in Z.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Move(Autodesk.Geometry.Vector)">
            <summary>
            Moves the model by the specified Vector in the ActiveWorkplane - or in the world if none is set.
            </summary>
            <param name="offset">Offset vector.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.RotateAboutXAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates the entire model by the speified angle about the X axis and about the
            specified origin in the ActiveWorkplane - or the world if none is set.
            </summary>
            <param name="origin">Origin of rotation.</param>
            <param name="angle">Angle of rotation.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.RotateAboutYAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates the entire model by the speified angle about the Y axis and about the
            specified origin in the ActiveWorkplane - or the world if none is set.
            </summary>
            <param name="origin">Origin of rotation.</param>
            <param name="angle">Angle of rotation.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.RotateAboutZAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates the entire model by the speified angle about the Z axis and about the
            specified origin in the ActiveWorkplane - or the world if none is set.
            </summary>
            <param name="origin">Origin of rotation.</param>
            <param name="angle">Angle of rotation.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.RebaseToWorkplane(Autodesk.Geometry.Workplane)">
            <summary>
            Rebases the model from the world to the specified workplane.
            </summary>
            <param name="toWorkplane">Target workplane.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.RebaseFromWorkplane(Autodesk.Geometry.Workplane)">
            <summary>
            Rebases the model from the specified workplane to the world.
            </summary>
            <param name="fromWorkplane">Source workplane.</param>
        </member>
        <member name="P:Autodesk.Geometry.DMTModel.ZoneDensity">
            <summary>
            Zone density used by the model. Default is 5.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTModel.TriangleBlocks">
            <summary>
            List of <see cref="T:Autodesk.Geometry.DMTTriangleBlock"/> used by the model.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTModel.BoundingBox">
            <summary>
            Bounding box of the model.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTModel.TotalNoOfVertices">
            <summary>
            Total number of vertices (<see cref="T:Autodesk.Geometry.DMTVertex"/>) that make up the model.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTModel.TotalNoOfTriangles">
            <summary>
            Total number of Triangles (<see cref="T:Autodesk.Geometry.DMTTriangleBlock"/>) that make up the model.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.AddTriangleBlock(Autodesk.Geometry.DMTTriangleBlock)">
            <summary>
            Adds a new Block to the list of blocks
            </summary>
            <param name="block">Block to be added.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.ToPointCloud">
            <summary>
            Returns the model points as a PointCloud.
            </summary>
            <returns>PointCloud object containing all model points.</returns>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.PointCloudFromTop">
            <summary>
            Creates a point cloud of all points that make up the "Top" surface of the
            DMT Model (i.e. those points that can be seen from above).
            </summary>
            <returns>PointCloud object containing the points.</returns>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.SurfaceFromTop">
            <summary>
            Creates a new model from all the points that make up the "Top" surface
            of the DMT Model (i.e. those triangles that can be seen in entirety from above).
            </summary>
            <returns>DMTModel object of the top surface.</returns>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.BoundaryNodes">
            <summary>
            Returns a point cloud of the DMT boundary points.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Boundaries">
            <summary>
            Returns a list of Polylines representing the edges of the DMT. Note that if a STL is provided the number of boundaries will equal the number of triangles.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.NextBoundary(System.Collections.Generic.List{Autodesk.Geometry.DMTModel.Edge}@,Autodesk.Geometry.DMTTriangleBlock)">
            <summary>
            This operation extracts a boundary from the list of edges
            </summary>
            <param name="edges">The list of edges.  As edges are used they are removed from this list</param>
            <param name="block">The block from which to extract the eges</param>
            <returns>A polyline representing a boundary</returns>
        </member>
        <member name="T:Autodesk.Geometry.DMTModel.Edge">
            <summary>
            This Class holds the index of two vertices that make up an edge where an ege is a part of a
            boundary
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTModel.Edge._point1Index">
            <summary>
            This is the index of the first point in the edge
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTModel.Edge._point2Index">
            <summary>
            This is the index of the second point in the edge
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTModel.Edge._triangleIndex">
            <summary>
            This is the triangle index for the edge
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Edge.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor initialises the edge
            </summary>
            <param name="point1Index">The index of the first point</param>
            <param name="point2Index">The index of the second point</param>
            <param name="triangleIndex">The triangle index for the edge</param>
        </member>
        <member name="P:Autodesk.Geometry.DMTModel.Edge.Point1Index">
            <summary>
            Gets the first point index
            </summary>
            <returns>The first point index </returns>
        </member>
        <member name="P:Autodesk.Geometry.DMTModel.Edge.Point2Index">
            <summary>
            Gets the second point index
            </summary>
            <returns>The second point index</returns>
        </member>
        <member name="P:Autodesk.Geometry.DMTModel.Edge.TriangleIndex">
            <summary>
            Gets the triangle index for the edge
            </summary>
            <returns>The triangle index for the edge</returns>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.ZoneModel">
            <summary>
            Disects the model into a number of zones.
            The zones are roughly made up of the number of triangles specified by the intZoneDensity
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Minimum(System.Double[])">
            <summary>
            Private operation that returns the minimum value in a given array of Doubles
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Minimum(System.Int32[])">
            <summary>
            Private operation that returns the minimum value in a given array of int
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Maximum(System.Double[])">
            <summary>
            Private operation that returns the maximum value in a given array of Doubles
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Maximum(System.Int32[])">
            <summary>
            Private operation that returns the maximum value in a given array of min
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.ProjectPoint(Autodesk.Geometry.Point,System.Boolean)">
            <summary>
            Projects a point onto the model in the Z axis and returns the nearest point to it.
            </summary>
            <param name="objPoint">Point to project.</param>
            <param name="blnProjectDownOnly">If True, points above the point of projection are ignored.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.ProjectPoints(System.Collections.Generic.List{Autodesk.Geometry.Point},System.Boolean)">
            <summary>
            Projects an array of points onto the model in the Z axis and returns the nearest point to each one.
            </summary>
            <param name="pointsToProject">List of the points to project.</param>
            <param name="projectDownOnly">If True, points above the point of projection are ignored.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.ProjectPointToTriangle(Autodesk.Geometry.Point,Autodesk.Geometry.Vector,Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            This operation projects a point onto a triangle to see if it hits it
            </summary>
            <param name="pointToProject">This is the point to project</param>
            <param name="projectionVector">This is the vector along which to project</param>
            <param name="vertex1">This is the first vertex in the triangle</param>
            <param name="vertex2">This is the second vertex in the triangle</param>
            <param name="vertex3">This is the third vertex in the triangle</param>
            <returns>The point on the triangle where the projected point hits, or Nothing if it does not</returns>
        </member>
        <member name="M:Autodesk.Geometry.DMTModel.Clone">
            <summary>
            Returns a clone of the current Model.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.DMTTriangle">
            <summary>
            Encapsulates a triangle. One or more triangles constitute a block.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangle._vertex1">
            <summary>
            Index of the first vertex in the triangle
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangle._vertex2">
            <summary>
            Index of the second vertex in the triangle
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangle._vertex3">
            <summary>
            Index of the third vertex in the triangle
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a DMTTriangle with the specified vertex indices.
            </summary>
            <param name="vertex1">Vertex index 1.</param>
            <param name="vertex2">Vertex index 2.</param>
            <param name="vertex3">Vertex index 3.</param>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangle.Vertex1">
            <summary>
            Index of vertex 1.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangle.Vertex2">
            <summary>
            Index of vertex 2.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangle.Vertex3">
            <summary>
            Index of vertex 3.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangle.GetNormal(Autodesk.Geometry.DMTTriangleBlock)">
            <summary>
            Returns a vector normal to the surface of the triangle.
            </summary>
            <param name="block">Block containing this triangle is part of.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangle.GetNormal(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Returns a unit normal vector to the surface of the triangle.
            </summary>
            <param name="vertex1">Point for the first triangle vertex.</param>
            <param name="vertex2">Point for the second triangle vertex.</param>
            <param name="vertex3">Point for the third triangle vertex.</param>
            <returns>The unit normal vector for the triangle.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangle.GetCentroid(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Gets triangle centroid.
            </summary>
            <param name="vertex1">Triangle Vertex.</param>
            <param name="vertex2">Second vertex.</param>
            <param name="vertex3">Third vertex.</param>
            <returns>The point that represents the centroid of the triangle.</returns>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangle.Clone">
            <summary>
            Returns a clone of this triangle.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.DMTTriangleBlock">
            <summary>
            Represents a block of triangles. One or more blocks make up a DMT model.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangleBlock._triangleFirstVertexIndices">
            <summary>
            These are the first vertices indices of the triangles that make up the block.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangleBlock._triangleSecondVertexIndices">
            <summary>
            These are the second vertices indices of the triangles that make up the block.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangleBlock._triangleThirdVertexIndices">
            <summary>
            These are the third vertices indices of the triangles that make up the block.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangleBlock._triangleVertices">
            <summary>
            These are the raw vertices that make up the triangles of the block.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangleBlock._vertexNormals">
            <summary>
            These are the triangle normals
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangleBlock._doVerticesHaveNormals">
            <summary>
            This indicates whether the vertices in this block have normals
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.#ctor">
            <summary>
            Constructs an empty DMTTriangleBlock.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.#ctor(System.Collections.Generic.List{Autodesk.Geometry.DMTTriangle},System.Collections.Generic.List{Autodesk.Geometry.DMTVertex},System.Boolean)">
            <summary>
            Constructs a DMTTriangleBlock and populates it with the passed list of triangles and vertices.
            </summary>
            <param name="triangles">List of triangles with which to populate the block.</param>
            <param name="vertices">List of vertices.</param>
            <param name="nodesHaveIJK">If True, vertices have IJK vector normals.</param>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.TriangleFirstVertexIndices">
            <summary>
            List of first vertice indeces for the triangles that make up the block.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.TriangleSecondVertexIndices">
            <summary>
            List of second vertice indeces for the triangles that make up the block.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.TriangleThirdVertexIndices">
            <summary>
            List of third vertice indeces for the triangles that make up the block.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.TriangleVertices">
            <summary>
            List of all the vertices.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.VertexNormals">
            <summary>
            List of all the vertex normals.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.NoOfTriangles">
            <summary>
            Number of triangles in a block.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.NoOfVertices">
            <summary>
            Number of vertices in a block.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.DoVerticesHaveNormals">
            <summary>
            If True, vertices have IJK normals. False otherwise.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.Flags">
            <summary>
            Gets the flags for the Block.  1 if nodes have normals, 0 otherwise
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.Vertices">
            <summary>
            Gets the vertices of a triangle block.
            </summary>
            <value></value>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleBlock.Triangles">
            <summary>
            Gets the triangles of a triangle block.
            </summary>
            <value></value>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.Clone">
            <summary>
            Returns a clone of this block.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.GetNormal(Autodesk.Geometry.Point)">
            <summary>
            Returns the vector normal of the first triangle with that vertex.
            </summary>
            <returns>The normal for the first triangle with specified vertex.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.GetVertex(System.Int32)">
            <summary>
            Get the vertex by its index.
            </summary>
            <param name="vertexIndex">The index of the point that represents vertex.</param>
            <returns>The vertex point.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.GetVertex1(System.Int32)">
            <summary>
            Get the vertex 1 by its triangle index.
            </summary>
            <param name="triangleIndex">The index of the triangle that contains the vertex.</param>
            <returns>The first vertex of the triangle.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.GetVertex2(System.Int32)">
            <summary>
            Get the vertex 2 by its triangle index.
            </summary>
            <param name="triangleIndex">The index of the triangle that contains the vertex.</param>
            <returns>The second vertex of the triangle.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.GetVertex3(System.Int32)">
            <summary>
            Get the vertex 3 by its triangle index.
            </summary>
            <param name="triangleIndex">The index of the triangle that contains the vertex.</param>
            <returns>The third vertex of the triangle.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.GetVertex1Index(System.Int32)">
            <summary>
            Get the vertex 1 index by its triangle index.
            </summary>
            <param name="triangleIndex">The index of the triangle that contains the vertex.</param>
            <returns>The first vertex index in the list of vertices.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.GetVertex2Index(System.Int32)">
            <summary>
            Get the vertex 2 index by its triangle index.
            </summary>
            <param name="triangleIndex">The index of the triangle that contains the vertex.</param>
            <returns>The second vertex index in the list of vertices.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.GetVertex3Index(System.Int32)">
            <summary>
            Get the vertex 3 index by its triangle index.
            </summary>
            <param name="triangleIndex">The index of the triangle that contains the vertex.</param>
            <returns>The third vertex index in the list of vertices.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.GetTrianglesAtVertex(Autodesk.Geometry.Point)">
            <summary>
            Get triangles indices sharing vertex.
            </summary>
            <param name="vertex">The vertex to which the triangles are connected.</param>
            <returns>The triangle indices sharing the vertex.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.AddTriangle(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Adds a triangle to the block using the vertex points.
            </summary>
            <param name="vertex1">The first vertex.</param>
            <param name="vertex2">The second vertex.</param>
            <param name="vertex3">The third vertex.</param>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.AddTriangle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a triangle to the block using vertex indices.
            </summary>
            <param name="vertex1Index">The first vertex index.</param>
            <param name="vertex2Index">The second vertex index.</param>
            <param name="vertex3Index">The third vertex index.</param>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleBlock.AddVertex(Autodesk.Geometry.Point)">
            <summary>
            Manually add a vertex to your triangle block
            </summary>
            <param name="vertex">The vertex to add.</param>
            <remarks></remarks>
        </member>
        <member name="T:Autodesk.Geometry.DMTTriangleZone">
            <summary>
            Encapsulates the list of triangles that constitute a zone of the model. Zoning a model increases
            performance when projecting a point onto the model in the Z axis.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangleZone._triangles">
            <summary>
            This is the list of triangles that are in the zone.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleZone.#ctor">
            <summary>
            Constructs an empty DMTTriangleZone.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleZone.#ctor(System.Collections.Generic.List{Autodesk.Geometry.DMTTriangleZoneEntry})">
            <summary>
            Constructs a DMTTriangleZone and populates it with the passed list.
            </summary>
            <param name="triangles">List of triangles with which to populate the zone.</param>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleZone.Triangles">
            <summary>
            List of triangles that constitute the zone.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleZone.AddTriangle(Autodesk.Geometry.DMTTriangleZoneEntry)">
            <summary>
            Adds a triangle to the zone.
            </summary>
            <param name="triangle">Triangle to add.</param>
        </member>
        <member name="T:Autodesk.Geometry.DMTTriangleZoneEntry">
            <summary>
            Encapsulates the indices of both block and triangle for the list of triangles that constitute a zone of the model.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangleZoneEntry._block">
            <summary>
            This is the block that this entry is part of.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTTriangleZoneEntry._triangle">
            <summary>
            This is the triangle this entry is part of.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleZoneEntry.#ctor">
            <summary>
            Default Constructor. Initialises both block and triangle indices to invalid values.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTTriangleZoneEntry.#ctor(System.Int32,System.Int32)">
            <summary>
            Initialises indices of both block and triangle to the specified values.
            </summary>
            <param name="block">Block index.</param>
            <param name="triangle">Triangle index.</param>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleZoneEntry.Block">
            <summary>
            Index of the block that contains the triangle.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTTriangleZoneEntry.Triangle">
            <summary>
            Index of the triangle within the block.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.DMTVertex">
            <summary>
            Encapsulates DMT mesh vertices. A vertex has a position, a normal and 'knows' what triangles it is a part of.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.DMTVertex._position">
            <summary>
            This is the position of the vertex.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTVertex.#ctor(Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Initialises the vertex position to the specified values.
            </summary>
            <param name="x">Position in X.</param>
            <param name="y">Position in Y.</param>
            <param name="z">Position in Z.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTVertex.#ctor(Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Initialises the vertex position and the IJK components of the normal to the values specified.
            </summary>
            <param name="x">Vertex position in X.</param>
            <param name="y">Vertex position in Y.</param>
            <param name="z">Vertex position in Z.</param>
            <param name="i">I component of the normal vector.</param>
            <param name="j">J component of the normal vector.</param>
            <param name="k">K component of the normal vector.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTVertex.#ctor(Autodesk.Geometry.Point)">
            <summary>
            Initialises the vertex position to the specified value.
            </summary>
            <param name="position">Captures vertex position in three axes.</param>
        </member>
        <member name="M:Autodesk.Geometry.DMTVertex.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Vector)">
            <summary>
            Initialises vertex position and normal to the specified values.
            </summary>
            <param name="position">Captures vertex position in three axes.</param>
            <param name="normal">Vector normal to the vertex.</param>
        </member>
        <member name="P:Autodesk.Geometry.DMTVertex.Position">
            <summary>
            Vertex position.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTVertex.Clone">
            <summary>
            Returns a clone of this vertex.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.DMTFileException">
            <summary>
            Defines the exception to be thrown on DMT file errors.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.DMTFileException.#ctor(Autodesk.Geometry.DMTFileError)">
            <summary>
            Sets the error.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.DMTFileException.Message">
            <summary>
            Textual representation of the error condition.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.Line">
            <summary>
            Encapsulates a straight line.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Line._startPoint">
            <summary>
            This is the start point of the line
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Line._endPoint">
            <summary>
            This is the end point of the line
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Line.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Constructs a Line between the specified start and end points.
            </summary>
            <param name="startPoint">Start point.</param>
            <param name="endPoint">End point.</param>
        </member>
        <member name="P:Autodesk.Geometry.Line.StartPoint">
            <summary>
            Line starts here.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Line.EndPoint">
            <summary>
            Line ends here.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Line.MidPoint">
            <summary>
            Centre of the line.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Line.BoundingBox">
            <summary>
            Returns the bounding box of the line.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Line.Intersects(Autodesk.Geometry.Line)">
            <summary>
            Determins whether two line segments intersect.
            </summary>
            <param name="secondLine"></param>
            <returns></returns>
        </member>
        <member name="T:Autodesk.Geometry.Point">
            <summary>
            Encapsulates a three-dimensional point and the permissible operations thereon.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Point._x">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Point._y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Point._z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Point.#ctor">
            <summary>
            Constructs a point at the origin of the co-ordinate system.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Point.#ctor(Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Constructs a point at the specified position in the co-ordinate system.
            </summary>
            <param name="x">X co-ordinate.</param>
            <param name="y">Y co-ordinate.</param>
            <param name="z">Z co-ordinate</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.#ctor(Autodesk.Geometry.MM[])">
            <summary>
            Constructs a point from an array of MM objects.
            </summary>
            <param name="pointArray">Array from which to create the point.</param>
            <exception cref="T:System.Exception">Thrown if input array does not contain exactly three coordinates.</exception>
        </member>
        <member name="M:Autodesk.Geometry.Point.#ctor(System.Double[])">
            <summary>
            Constructs a point from an array of Doubles.
            </summary>
            <param name="pointArray">Array from which to create the point.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.#ctor(System.String,System.Char)">
            <summary>
            Constructs a point from a single line of text and a delimiter.
            </summary>
            <param name="textLine">Line of text containing the delimited coordinates.</param>
            <param name="delimiter">Delimiter. If none is specified, a space is assumed.</param>
            <exception cref="T:System.Exception">Thrown if the input string does not contain exactly three coordinates or if the string cannot be parsed.</exception>
        </member>
        <member name="P:Autodesk.Geometry.Point.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Point.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Point.Z">
            <summary>
            Z coordinate.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Addition(Autodesk.Geometry.Point,Autodesk.Geometry.Vector)">
            <summary>
            Sums a Point and a Vector i.e displace the point by the vector.
            </summary>
            <param name="left">Point to sum.</param>
            <param name="right">Vector to sum.</param>
            <returns>Displaced point.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Subtraction(Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Subtracts the specified right-hand point from the left, thereby rendering the vector from right to left.
            </summary>
            <param name="left">Left-hand point.</param>
            <param name="right">Right-hand point.</param>
            <returns>Vector from right to left.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Subtraction(Autodesk.Geometry.Point,Autodesk.Geometry.Vector)">
            <summary>
            Subtracts the given Vector from the Point i.e displaces the point by the vector.
            </summary>
            <param name="left">Point from which to subtract vector.</param>
            <param name="right">Vector to subtract.</param>
            <returns></returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Multiply(Autodesk.Geometry.Point,System.Double)">
            <summary>
            Scales a point in all axes by the specified scalar value.
            </summary>
            <param name="left">Point to scale.</param>
            <param name="scalar">Scaling factor.</param>
            <returns>New point containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Division(Autodesk.Geometry.Point,System.Double)">
            <summary>
            Divides a point in all axes by the scalar value.
            </summary>
            <param name="left">Point to scale.</param>
            <param name="scalar">Scaling factor.</param>
            <returns>New point containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Multiply(System.Double,Autodesk.Geometry.Point)">
            <summary>
            Scales a point in all axes by the specified scalar value.
            </summary>
            <param name="scalar">Scaling factor.</param>
            <param name="right">Point to scale.</param>
            <returns>New point containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Equality(Autodesk.Geometry.Point,System.Object)">
            <summary>
            Compares a Point to an Object and returns true if they are equal. Returns False if the specified Object
            is neither a Point nor a MM. Returns True if both Point and Object are null.
            </summary>
            <param name="left">Point to compare.</param>
            <param name="right">Object to compare.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Inequality(Autodesk.Geometry.Point,System.Object)">
            <summary>
            Compares a Point to an Object and returns false if they are equal. Returns True if the specified Object
            is neither a Point nor a MM. Returns False if both Point and Object are null.
            </summary>
            <param name="left">Point to compare.</param>
            <param name="right">Object to compare.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Inequality(Autodesk.Geometry.MM[],Autodesk.Geometry.Point)">
            <summary>
            Compares a Point to an array of MM length objects, returning True if they are unequal.
            </summary>
            <param name="left">MM array.</param>
            <param name="right">Point.</param>
            <returns>True if operands are unequivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.op_Equality(Autodesk.Geometry.MM[],Autodesk.Geometry.Point)">
            <summary>
            Compares a Point to an array of MM length objects, returning True if they are equal.
            </summary>
            <param name="left">MM array.</param>
            <param name="right">Point.</param>
            <returns>True if operands are equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.ToString">
            <summary>
            Returns a string representation of the Point in the form: X.XXX Y.YYY Z.ZZZ.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Point.ToString(System.Char[])">
            <summary>
            Returns a string representation of the point with a custom delimiter between the three coordinates.
            If, for example, a comma were chosen as the delimeter, the resultant output would be of the form:
            X.XXX,Y.YYY,Z.ZZZ
            </summary>
            <param name="delimiter">Can be any string.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.Equals(System.Object)">
            <summary>
            Returns true if the Point is equal to the specified object. If the object is not a point
            or is not equivalent to the Point, the operation returns False.
            </summary>
            <param name="obj">Object to comare against.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.Equals(System.Object,System.Int32)">
            <summary>
            Returns true if the Point is equal to the specified object with at least the specified precision. If the the object is not a point
            or is not equivalent to the Point, the operation returns False.
            </summary>
            <param name="obj">Object to comare against.</param>
            <param name="nDecPts">Number of decimal places to compare.</param>
            <returns>True if the operands are deemed equal.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.GetHashCode">
            <summary>
            Returns the HashCode for this Point.
            </summary>
            <returns>The HashCode for this Point.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.RebaseFromWorkplane(Autodesk.Geometry.Workplane)">
            <summary>
            Rebases the Point from the specified workplane to the world.
            </summary>
            <param name="fromWorkplane">Workplane from which to rebase the point.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.RebaseToWorkplane(Autodesk.Geometry.Workplane)">
            <summary>
            Rebases Point from the world to the specified Workplane
            </summary>
            <param name="toWorkplane">Workplane to rebase the Point to.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.RotateAboutVector(Autodesk.Geometry.Vector,Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates Point by the specified angle in radians about the specified Vector.
            </summary>
            <param name="vectorToRotateAbout">Vector about which to rotate the Point.</param>
            <param name="rotationOrigin">Origin of coordinate system.</param>
            <param name="angle">Angle to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.RotateAboutXAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates Point by the specified angle in radians about the specified Point in the X axis.
            </summary>
            <param name="pointToRotateAbout">Point about which to rotate.</param>
            <param name="angle">Angle to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.RotateAboutYAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates Point by the specified angle in radians about the specified Point in the Y axis.
            </summary>
            <param name="pointToRotateAbout">Point about which to rotate.</param>
            <param name="angle">Angle to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.RotateAboutZAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates Point by the specified angle in radians about the specified Point in the Z axis.
            </summary>
            <param name="pointToRotateAbout">Point about which to rotate.</param>
            <param name="angle">Angle to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.EulerRotation(Autodesk.Geometry.Euler.Angles)">
            <summary>
            Rotates the Point by the specified Euler Angles.
            </summary>
            <param name="angle">Angles of rotation.</param>
        </member>
        <member name="M:Autodesk.Geometry.Point.DistanceToPoint(Autodesk.Geometry.Point)">
            <summary>
            Returns the distance between this and another Point.
            </summary>
            <param name="secondPoint">Point from which to calculate distance.</param>
            <returns>Inter-point distance.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.LiesOnLine(Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Determines whether this Point lies on the straight line between two Points specified in the input arguments.
            </summary>
            <param name="lineStartPoint">First point.</param>
            <param name="lineEndPoint">Second point.</param>
            <returns>True if the points are colinear; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.IsInsideTriangle(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Returns true if the point is inside the triangle, otherwise it returns false. It uses Barycentric coordinates of the point to return the result.
            </summary>
            <param name="vertex1">First triangle Vertex</param>
            <param name="vertex2">Second triangle Vertex</param>
            <param name="vertex3">Third triangle Vertex</param>
            <returns>True if point is within the triangle.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.IsRayInterceptTriangleTest(Autodesk.Geometry.Vector,Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Returns true if a ray with given direction from the point intercepts the triangle, otherwise it returns false.
            Uses ray triangle intersection algorithm by Moller Haines.
            </summary>
            <param name="rayDirection">Direction of the ray</param>
            <param name="vertex1">First triangle Vertex</param>
            <param name="vertex2">Second triangle Vertex</param>
            <param name="vertex3">Third triangle Vertex</param>
            <returns>True if point is within the triangle.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.ProjectToPlane(Autodesk.Geometry.Vector,Autodesk.Geometry.Point,Autodesk.Geometry.Vector)">
            <summary>
            This operation projects a point onto a Plane
            </summary>
            <param name="pointToProject">This is the point to project</param>
            <param name="projectionVector">This is the direction in which to project the point</param>
            <param name="pointOnPlane">This is any point on the plane</param>
            <param name="planeNormal">This is the plane normal</param>
            <returns>The point on the plane where the projected point hits</returns>
        </member>
        <member name="M:Autodesk.Geometry.Point.Clone">
            <summary>
            Returns a clone of this Point.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.PointCloud">
            <summary>
            Encapsulates a point cloud, a collection of points that are not linked together.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.PointCloud.#ctor">
            <summary>
            Constructs an empty PointCloud.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.PointCloud.#ctor(System.Collections.Generic.List{Autodesk.Geometry.Point})">
            <summary>
            Constructs a PointCloud and populates it with the specified points.
            </summary>
            <param name="points">List of points with which to populate the PointCloud.</param>
        </member>
        <member name="P:Autodesk.Geometry.PointCloud.BoundingBox">
            <summary>
            Calculates and returns the bounding box of the point cloud.
            </summary>
            <returns>Bounding box of this PointCloud.</returns>
        </member>
        <member name="P:Autodesk.Geometry.PointCloud.Centre">
            <summary>
            Point representing the centre of the point cloud.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.PointCloud.WriteDUCTPictureFile(Autodesk.FileSystem.File,Autodesk.LengthUnits)">
            <summary>
            Creates a DUCTPicture file at the specified path and using the specified units.
            </summary>
            <param name="file">Path to file.</param>
            <param name="enmUnits">Units to use.</param>
        </member>
        <member name="M:Autodesk.Geometry.PointCloud.Clone">
            <summary>
            Returns a clone of this PointCloud.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.PointCloud.IndexOfMinumumPoint(Autodesk.Axes)">
            <summary>
            Returns the index of the point that is the minimum in the specified axis.
            </summary>
            <param name="Axis">X, Y or Z.</param>
            <returns>Index of the minimum point.</returns>
        </member>
        <member name="T:Autodesk.Geometry.Polyline">
            <summary>
            Encapsulates a Polyline.
            A Polyline comprises a collection of points, each connected by a straight line.
            If marked as closed, the start and end points are also joined by a line;
            it is not necessary to duplicate the start point at the end of the list in order to close the shape.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Polyline._isClosed">
            <summary>
            This indicates whether the polyline should be treated as a closed polyline or not.
            This removes the need to hold an extra end point that is the same as the start point.
            It also makes it less complex to work with.  If you moved the start point then in order
            to ensure the curve stayed closed you would also need to move the end point
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.#ctor">
            <summary>
            Constructs an empty PolyLine.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.#ctor(System.Collections.Generic.List{Autodesk.Geometry.Point})">
            <summary>
            Constructs a PolyLine with the specified list of points.
            </summary>
            <param name="points">Points with which to initialise the Polyline.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.#ctor(System.Collections.Generic.List{Autodesk.Geometry.Point},System.Boolean)">
            <summary>
            Constructs a Polyline, initialises the list of points to the specified value and, if specified, closes the line.
            </summary>
            <param name="points">List of points with which to initialise the Polyline.</param>
            <param name="isClosed">If True, the Polyline is closed. False otherwise.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.#ctor(Autodesk.Geometry.Spline,System.Double)">
            <summary>
            Constructs a Polyline from a SplineCurve, fitting it to the specified tolerance.
            </summary>
            <param name="splineCurve">SplineCurve from which to create the Polyline.</param>
            <param name="tolerance">Square tolerance within which to fit the spline curve.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.#ctor(Autodesk.FileSystem.File)">
            <summary>
            Constructs a Polyline and initialises it from an ASCII file.
            Each line of the file comprises the three coordinates of each point seperated by spaces. <br></br>
            I.e. <br></br><br></br>
            A.AAA B.BBB C.CCC <br></br>
            D.DDD E.EEE F.FFF <br></br>
            ... <br></br>
            etc.
            </summary>
            <param name="asciiFile">ASCII file from which to read the Polyline data.</param>
        </member>
        <member name="P:Autodesk.Geometry.Polyline.BoundingBox">
            <summary>
            BoundingBox of the Polyline. Nothing if the Polyline contains no points.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Polyline.Length">
            <summary>
            Length of the Polyline.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Polyline.LengthMap">
            <summary>
            List of distances between consecutive points. The 1st element of the list will be zero because it is the first point.
            The 2nd element of the list will be the distance between the 2nd point of the polyline and the 1st point. In generic terms, LengthMap
            will contain Point(n) - Point(n-1).
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Polyline.Centre">
            <summary>
            Centre point of the Polyline.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Polyline.Normal">
            <summary>
            Vector normal to the centre of the Polyline.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Polyline.IsClosed">
            <summary>
            True if the Polyline is closed; false otherwise.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.ReadFromDUCTPictureFile(Autodesk.FileSystem.File)">
            <summary>
            Extracts Polylines from a DUCT picture file and returns them as a list.
            </summary>
            <param name="file">DUCT picture file.</param>
            <returns>List of polylines.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.WriteToDUCTPictureFile(Autodesk.FileSystem.File)">
            <summary>
            Writes this Polyline to the specified DUCT picture file.
            The file is always written in MM, as that is the unit of measure of the Polyline.
            </summary>
            <param name="file">DUCT file to be written.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.WriteToASCIIFile(Autodesk.FileSystem.File)">
            <summary>
            Writes the Polyline to the specified ascii file.
            Each point on the Polyline is written as a seperate line in the file,
            each coordinate being delimited from the next with a space.
            </summary>
            <param name="asciiFile">ASCII file to to be written.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.NextPointIndex(System.Int32)">
            <summary>
            Returns to the caller the index of the next point after the one specified.
            If the specified index is greater or equal to the end of the line, the start index is returned.
            </summary>
            <param name="index">Index prior to the one that is to be returned.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.IndexOfNearestPoint(Autodesk.Geometry.Point)">
            <summary>
            Returns to the caller the index of the point on the Polyline that is nearest to that specified in the single input argument.
            </summary>
            <param name="testPoint">Point for which to find the nearest point on the Polyline.</param>
            <returns>Index of the nearest Polyline point to that specified.</returns>
            <exception cref="T:System.Exception">Thrown if the PolyLine contains no points.</exception>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.ToPointCloud">
            <summary>
            Returns a PointCloud of all points on the PolyLine.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.Densify(System.Double)">
            <summary>
            Ensures that no connecting line exceeds the specified span length.
            If such a line exists, a point(s) is inserted and the line split.
            Linearity is preserved.
            </summary>
            <param name="maximumSpanLength">Maximum permissible span length.</param>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.Repoint(System.Int32)">
            <summary>
            Repoints the curve creating the specified number of points.
            </summary>
            <param name="numberOfPoints">The number of new points that are added to the curve and evenly distributed between the start and end points.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.CleanUpPolylineClosure">
            <summary>
            This sub ensures that the Polyline does not contain an unnecessary duplication of the
            first point to make the Polyline closed.  If it finds a duplicate it removes it and marks
            the Polyline closed.  Otherwise the Polyline stays unaffected.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.Scale(System.Double)">
            <summary>
            Scales the Polyline about the origin by the specified scaling factor. All points are scaled.
            </summary>
            <param name="scalar">Factor by which to scale.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.Scale(Autodesk.Geometry.Point,System.Double)">
            <summary>
            Scales the Polyline about the specified origin and by the specified scaling factor. All points are scaled.
            </summary>
            <param name="origin">Origin about which to scale.</param>
            <param name="scalar">Factor by which to scale.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.Scale(System.Double,System.Double,System.Double)">
            <summary>
            Scales the Polyline about the origin using the specified scaling factors. All points are scaled.
            </summary>
            <param name="scalarX">Factor by which to scale in X.</param>
            <param name="scalarY">Factor by which to scale in Y.</param>
            <param name="scalarZ">Factor by which to scale in Z.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.Scale(Autodesk.Geometry.Point,System.Double,System.Double,System.Double)">
            <summary>
            Scales the Polyline about the specified origin and using the specified scaling factors. All points are scaled.
            </summary>
            <param name="origin">Origin about which to scale.</param>
            <param name="scalarX">Factor by which to scale in X.</param>
            <param name="scalarY">Factor by which to scale in Y.</param>
            <param name="scalarZ">Factor by which to scale in Z.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.Move(Autodesk.Geometry.Vector)">
            <summary>
            Moves the polyline by the specified Vector. All points are displaced.
            </summary>
            <param name="offset">Vector specifying offset.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.RotateAboutXAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates the entire polyline by the specified angle about the X axis and the specified origin within the ActiveWorkplane - or the world if none is set.
            </summary>
            <param name="origin">Origin about which to rotate the line.</param>
            <param name="angle">Number of radians to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.RotateAboutYAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates the entire polyline by the specified angle about the Y axis and the specified origin within the ActiveWorkplane - or the world if none is set.
            </summary>
            <param name="origin">Origin about which to rotate the line.</param>
            <param name="angle">Number of radians to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.RotateAboutZAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates the entire polyline by the specified angle about the Z axis and the specified origin within the ActiveWorkplane - or the world if none is set.
            </summary>
            <param name="origin">Origin about which to rotate the line.</param>
            <param name="angle">Number of radians to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.RebaseToWorkplane(Autodesk.Geometry.Workplane)">
            <summary>
            Rebases the polyline from the world to the specified workplane.
            </summary>
            <param name="toWorkplane">Destination workplane.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.RebaseFromWorkplane(Autodesk.Geometry.Workplane)">
            <summary>
            Rebases the polyline from the specified workplane to the world.
            </summary>
            <param name="fromWorkplane">Workplane from which the line is to be rebased.</param>
        </member>
        <member name="M:Autodesk.Geometry.Polyline.Clone">
            <summary>
            Returns a clone of this Polyline.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.Spline">
            <summary>
            Encapsulates a Spline Curve.
            </summary>
            <remarks>
            A spline curve is similar to a Polyline except every point on the curve has a before and after
            distance and magnitude value used to control the direction of the curve through the point.
            </remarks>
        </member>
        <member name="M:Autodesk.Geometry.Spline.#ctor">
            <summary>
            Constructs an empty curve.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Spline.#ctor(System.Collections.Generic.List{Autodesk.Geometry.Point},System.Boolean)">
            <summary>
            Constructs a best-fit spline curve through the specified ordered points.
            </summary>
            <param name="orderedBestFitPoints">Ordered list of points to fit.</param>
            <param name="autoFree">If true, joins will be smoothed; otherwise points are added to the spline with straight lines.</param>
        </member>
        <member name="M:Autodesk.Geometry.Spline.#ctor(System.Collections.Generic.List{Autodesk.Geometry.SplinePoint})">
            <summary>
            Constructs a new spline curve from a list of spline points.
            </summary>
            <param name="orderedSplinePoints">Spline points through which to create the curve.</param>
        </member>
        <member name="M:Autodesk.Geometry.Spline.#ctor(Autodesk.Geometry.SplinePoint[])">
            <summary>
            Constructs a new spline curve from an array of spline points
            </summary>
            <param name="orderedSplinePoints">The spline points through which to create a curve</param>
        </member>
        <member name="M:Autodesk.Geometry.Spline.GetSpanControlPoint(System.Int32,System.Int32)">
            <summary>
            Control point for the specified span and index.
            </summary>
            <param name="spanIndex">Zero-based span index.</param>
            <param name="controlPointIndex">Zero-based control point index.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown in either of the following two cases:<br></br><br></br>
            The specified span index does not identify a valid span in the spline. i.e. 0 &gt; spanIndex or spanIndex - 1 &gt;= number of spans.<br></br>
            The control point index fails to meet the condition: 0 &gt;= controlPointIndex &lt;= 3.
            </exception>
        </member>
        <member name="M:Autodesk.Geometry.Spline.GetSpanControlPoints(System.Int32)">
            <summary>
            Control points of the specified span.
            </summary>
            <param name="spanIndex">Zero-based span index.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the specified span index does not identify a valid span in the spline.
            i.e. 0 &gt; spanIndex or spanIndex - 1 &gt;= number of spans.
            </exception>
        </member>
        <member name="M:Autodesk.Geometry.Spline.GetBezierCurve(System.Int32)">
            <summary>
            The specified span as a CubicBezier.
            </summary>
            <param name="spanIndex">Zero-based span index.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the specified span index does not identify a valid span in the spline.
            i.e. 0 &gt; spanIndex or spanIndex - 1 &gt;= number of spans.
            </exception>
        </member>
        <member name="P:Autodesk.Geometry.Spline.IsClosed">
            <summary>
            True if spline is closed; false otherwise.
            </summary>
            <remarks>The spline is closed if the distance from its first point to its last is zero.</remarks>
            <exception cref="T:System.Exception">Thrown if the setting of this property fails to either open or close the spline.</exception>
        </member>
        <member name="M:Autodesk.Geometry.Spline.Clone">
            <summary>
            Returns a clone of this spline.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Spline.AddPointToEndOfSpline(Autodesk.Geometry.Point,System.Boolean)">
            <summary>
            Adds a point to the end of this spline.
            </summary>
            <param name="point">Point to be added to the end of the spline.</param>
            <param name="autoFree">If true (default), join will be smoothed; otherwise point is added to the spline with a straight line.</param>
        </member>
        <member name="M:Autodesk.Geometry.Spline.InsertPoint(System.Int32,Autodesk.Geometry.Point,System.Double)">
            <summary>
            Inserts the specified point into this spline.
            If inserted in the middle, then no control points in the existing spline are changed.
            If inserted at the beginning or end of the spline, the join is smoothed without altering the shape of the original spline.
            </summary>
            <param name="pointIndex">
            Index of the point to be added. An index of zero adds the point to the front of the spline.
            An index equal to or exceeding the maximum current point index will add the point to the end of the line.
            </param>
            <param name="point">Point to insert.</param>
            <param name="pointProximityTolerance">Optional tolerance. Prevents a point from being added in too close a proximity to a neighbouring point.</param>
            <returns>Sets to True if the operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Spline.SplitSpan(System.Int32,System.Double,System.Double)">
            <summary>
            Splits the Bezier curve span at the specified index at the point infered from the specified t parameter.
            </summary>
            <param name="spanIndex">Index of the span.</param>
            <param name="t">Value of t on which to split where 0 &gt;= t &lt;= 1.</param>
            <param name="pointProximityTolerance">Optional tolerance. Prevents a point from being added in too close a proximity to a neighbouring point.</param>
            <returns>True if the operation succeeds; false otherwise.</returns>
        </member>
        <member name="T:Autodesk.Geometry.Spline.SplineExtensionEnd">
            <summary>
            Used to specify endedness for extension operations.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Spline.LinearExtension(System.Double,Autodesk.Geometry.Spline.SplineExtensionEnd,System.Double)">
            <summary>
            Applies a linear extension to either the start or to the end of this spline.
            </summary>
            <param name="extensionDistance">Distance by which to extend the spline.</param>
            <param name="selectEndOfSpline">Indicates either the start or the end of the line.</param>
            <param name="pointProximityTolerance">Optional tolerance. Prevents a point from being added in too close a proximity to a neighbouring point.</param>
            <returns>True if the operation succeeds; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Spline.WriteToDUCTPictureFile(Autodesk.FileSystem.File)">
            <summary>
            Writes this spline to the specified DUCT picture file.
            The file is written in units of MM as this is the unit of points that constitute the line.
            </summary>
            <param name="file">File to write.</param>
            <exception cref="T:System.Exception">Thrown if the curve possesses fewer than two points.</exception>
        </member>
        <member name="M:Autodesk.Geometry.Spline.FreeTangentsAndMagnitudes">
            <summary>
            Frees the tangent directions and magnitudes through all points on the curve.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Spline.FreeCurveDirections">
            <summary>
            Frees the tangent directions through all points on the curve.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Spline.FreePointDirections(System.Int32)">
            <summary>
            Frees the entry and exit direction of a point
            </summary>
            <param name="pointIndex">Index of the point to free.</param>
        </member>
        <member name="M:Autodesk.Geometry.Spline.FreeCurveMagnitudes">
            <summary>
            Frees the magnitudes through all points on the curve.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Spline.FreeChordMagnitudes(System.Int32)">
            <summary>
            Frees chord magnitudes for the specified span.
            </summary>
            <param name="spanIndex">Index of span within this spline.</param>
        </member>
        <member name="M:Autodesk.Geometry.Spline.FreePointMagnitudes(System.Int32)">
            <summary>
            Frees magnitude for the specified point. This is a variation of the FreeChordMagnitudes() method.
            </summary>
            <param name="pointIndex">Index of the point to be freed.</param>
        </member>
        <member name="M:Autodesk.Geometry.Spline.AddDummyPointsToClosedSpline(System.Int32@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            If a spline is closed then we will create dummy points to force curvature continuity across the start/end of the spline
            This function will create the dummy points if they are required
            </summary>
            <param name="pointIndex"> If dummy points are added to the beginning of the spline then point index will be increased accordingly </param>
            <param name="wasSplineInitiallyClosed"> We will track whether the spline was closed before the points were added </param>
            <param name="werePointsAddedToStart"> This will return true if dummy points were added to the start of the spline </param>
            <param name="werePointsAddedToEnd">  This will return true if dummy points were added to the end of the spline  </param>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.Spline.RemoveDummyPointsFromClosedSpline(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            If a spline is closed then we will create dummy points to force curvature continuity across the start/end of the spline
            This function will create the dummy points if they are required
            </summary>
            <param name="wasSplineInitiallyClosed"> If dummy points were added to a closed spline then it will not be closed any more. This prameter states whether the spline was closed before the dummy points were added </param>
            <param name="werePointsAddedToStart"> True if dummy points were added to the start of the spline</param>
            <param name="werePointsAddedToEnd"> True if dummy points were added to the end of the spline </param>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.Spline.GetLengthBetweenPoints(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Approximates the length between the two specified points along the path of the spline.
            </summary>
            <param name="chunkingTolerance">Measure of acceptable error.</param>
            <param name="pointProximityTolerance">Prevents points from being considered in the calculation if they are in too close a proximity to one another.</param>
            <param name="startPoint">Point on curve at which to commence length calculation.</param>
            <param name="endPoint">Point on curve at which to end length calculation.</param>
            <returns>Calculated length.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Spline.IsSplineClosed">
            <summary>
            Private function to check whether a spline is closed.
            This exists to be used by the Property Me.Closed() which can get or set whether the spline is closed
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Spline.ChunkSpline(System.Collections.Generic.List{System.Double}@,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Create a linear approximation of a spline
            This is used to calculate the length of a spline quickly and accurately
            doubles are used instead of doubles to reduce the chance of rounding errors
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Spline.ReorderClosedSpline(System.Int32)">
            <summary>
            If closed, reorders this spline so that it has a new start point.
            </summary>
            <param name="newStartIndex">Index of the point to set as start.</param>
            <exception cref="T:System.Exception">Thrown if newStartIndex is out of range or the spline is open.</exception>
        </member>
        <member name="M:Autodesk.Geometry.Spline.Reverse">
            <summary>
            Reverses the curve
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Spline.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the curve between the points specified
            </summary>
            <param name="index">The point to start the reversing from</param>
            <param name="count">The number of points to reverse</param>
        </member>
        <member name="M:Autodesk.Geometry.Spline.CubicBezier(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point,System.Double)">
            <summary>
            Evaluates the specific point on a cubic bezier curve.
            </summary>
            <param name="p0">Control point 1 of the bezier curve.</param>
            <param name="p1">Control point 2 of the bezier curve.</param>
            <param name="p2">Control point 3 of the bezier curve.</param>
            <param name="p3">Control point 4 of the bezier curve.</param>
            <param name="t">Position of the points needs to be evaluated on Cubic Bezier curver. Ranges from 0 to 1.</param>
            <returns></returns>
        </member>
        <member name="M:Autodesk.Geometry.Spline.ReadFromDUCTPictureFile(Autodesk.FileSystem.File)">
            <summary>
            Extracts spline curves from a DUCT picture file and returns them to the caller.
            </summary>
            <param name="file">Path to the DUCT picture file.</param>
            <returns>A list of spline curves.</returns>
        </member>
        <member name="T:Autodesk.Geometry.SplinePoint">
            <summary>
            SplinePoint inherits from Point. In addition to possessing location, a spline point also has direction and
            magnitude before and after the point.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.SplinePoint._directionBefore">
            <summary>
            This is the direction of the Spline Curve into the point
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.SplinePoint._magnitudeBefore">
            <summary>
            This is the magnitude of the direction of the Spline Curve into the point
            It is kept separate from the direction to allow calculations to be more efficient
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.SplinePoint._directionAfter">
            <summary>
            This is the direction of the Spline Curve out of the point
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.SplinePoint._magnitudeAfter">
            <summary>
            This is the magnitude of the direction of the Spline Curve out of the point
            It is kept separate from the direction to allow calculations to be more efficient
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.SplinePoint.#ctor(Autodesk.Geometry.Point)">
            <summary>
            Constructs a new SplinePoint about the specified point argument. Directions and magnitudes are unspecified.
            </summary>
            <param name="point">Point about which to base the new SplinePoint.</param>
        </member>
        <member name="M:Autodesk.Geometry.SplinePoint.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Vector,Autodesk.Geometry.MM,Autodesk.Geometry.Vector,Autodesk.Geometry.MM)">
            <summary>
            Constructs a new SplinePoint with the specified position, directions and magnitudes.
            </summary>
            <param name="point">Position of the point.</param>
            <param name="directionBefore">Direction before the point.</param>
            <param name="magnitudeBefore">Magnitude before the point.</param>
            <param name="magnitudeAfter">Direction after the point.</param>
            <param name="directionAfter">Magnitude after the point.</param>
        </member>
        <member name="M:Autodesk.Geometry.SplinePoint.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Constructs a new SplinePoint with the specified position. If present, directions
            and magnitudes are inferred from the supplied control points.
            </summary>
            <param name="position">Position of the point.</param>
            <param name="controlPointBefore">Control point before position.</param>
            <param name="controlPointAfter">Control point after position.</param>
        </member>
        <member name="P:Autodesk.Geometry.SplinePoint.DirectionBefore">
            <summary>
            Vector specifying direction prior to the point.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.SplinePoint.MagnitudeBefore">
            <summary>
            Magnitude prior to the point.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.SplinePoint.DirectionAfter">
            <summary>
            Vector specifying direction after the point.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.SplinePoint.MagnitudeAfter">
            <summary>
            Magnitude after the point.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.SplinePoint.Clone">
            <summary>
            Returns a clone of the spline point.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.GeometricEntities.Surface">
            <summary>
            Represents a non-primitive surface defined by a network of curves.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.GeometricEntities.Surface.#ctor">
            <summary>
            Creates a surface with an empty list of laterals and longitudinals.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.GeometricEntities.Surface.#ctor(System.Collections.Generic.List{Autodesk.Geometry.Spline},System.Boolean)">
            <summary>
            Creates a surface from the surface curves provided. The other set of surface curves is calculated by joining the network.
            </summary>
            <param name="surfaceCurves">The laterals or longitudinals of the surface.</param>
            <param name="areLaterals">True if the curves are the laterals, false if they are the longitudinals of the surface.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided surface curves don't have the same number of points.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the number of surface curves is below 2.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when surface curves are null.</exception>
        </member>
        <member name="M:Autodesk.Geometry.GeometricEntities.Surface.#ctor(System.Collections.Generic.List{Autodesk.Geometry.Spline},System.Collections.Generic.List{Autodesk.Geometry.Spline})">
            <summary>
            Creates a surface from the laterals and longitudinals provided.
            </summary>
            <param name="laterals">The lateral curves.</param>
            <param name="longitudinals">The longitudinal curves.</param>
            <exception cref="T:System.ArgumentException">Thrown when the provided surface curves don't have the same number of points.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the coincident nodes constraint of a network is not met by the provided laterals and longitudinals.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the number of laterals is below 2.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the number of longitudinals is below 2.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when laterals or longitudinals are null.</exception>
        </member>
        <member name="P:Autodesk.Geometry.GeometricEntities.Surface.Laterals">
            <summary>
            Gets the list of laterals.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.GeometricEntities.Surface.Longitudinals">
            <summary>
            Gets the list of longitudinals.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.GeometricEntities.Surface.GetNormal(System.Int32,System.Int32)">
            <summary>
            Gets the normal of the Surface at the specified point.
            </summary>
            <param name="lateralIndex">Lateral index of point on surface.</param>
            <param name="longitudinalIndex">Longitudinal index of point on surface.</param>
            <returns>The normal vector at the specified point. </returns>
        </member>
        <member name="M:Autodesk.Geometry.GeometricEntities.Surface.HaveTheSameNumberOfPoints(System.Collections.Generic.List{Autodesk.Geometry.Spline},System.Collections.Generic.List{Autodesk.Geometry.Spline})">
            <summary>
            Checks if the provided surface curves have the same number of curves.
            </summary>
            <param name="laterals">The lateral curves.</param>
            <param name="longitudinals">The longitudinal curves.</param>
            <returns>True if the number of points is the same, false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.GeometricEntities.Surface.HaveTheSameNumberOfPoints(System.Collections.Generic.List{Autodesk.Geometry.Spline})">
            <summary>
            Checks if the provided surface curves have the same number of curves.
            </summary>
            <param name="surfaceCurves">The surface curves.</param>
            <returns>True if the number of points is the same, false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.GeometricEntities.Surface.AreLateralPointsPositionsCoincidentWithLongitudinalPointsPositions(System.Collections.Generic.List{Autodesk.Geometry.Spline},System.Collections.Generic.List{Autodesk.Geometry.Spline})">
            <summary>
            Checks if the points for laterals are coincident with the longitudinal ones.
            </summary>
            <param name="laterals">The lateral curves.</param>
            <param name="longitudinals">The longitudinal curves.</param>
            <returns>True if points are coincident, false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.GeometricEntities.Surface.CreatePerpendiculars(System.Collections.Generic.List{Autodesk.Geometry.Spline})">
            <summary>
            Creates the perpendicular curves to surface curves.
            </summary>
            <param name="curves"></param>
            <returns> The perpendicular curves.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the provided surface curves don't have the same number of points.</exception>
        </member>
        <member name="T:Autodesk.Geometry.Vector">
            <summary>
            Encapsulates a three dimensional vector and operations thereon.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Vector._i">
            <summary>
            Vector i component.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Vector._j">
            <summary>
            Vector j component.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Vector._k">
            <summary>
            Vector k component.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Vector.#ctor">
            <summary>
            Constructs a null vector.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Vector.#ctor(Autodesk.Geometry.MM,Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Constructs a vector initialised to the specified magnitudes.
            </summary>
            <param name="i">Magnitude in i.</param>
            <param name="j">Magnitude in j.</param>
            <param name="k">Magnitude in k.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Point)">
            <summary>
            Constructs a vector between the specified start and end points.
            </summary>
            <param name="startPoint">Vector start point.</param>
            <param name="endPoint">Vector end point.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.#ctor(Autodesk.Geometry.MM[])">
            <summary>
            Constructor initialises the Vector using an array of MM objects.
            </summary>
            <param name="componentArray">Array of MM objects from which to create the vector.</param>
            <exception cref="T:System.Exception">Thrown if input array does not contain three coordinates.</exception>
        </member>
        <member name="M:Autodesk.Geometry.Vector.#ctor(System.String,System.Char)">
            <summary>
            Constructs a Vector from a single line of text, the magnitudes of which are demarked by the specified delimeter.
            </summary>
            <param name="textLine">Line of text containing the components and separated by the delimiter.</param>
            <param name="delimiter">Delimiter - defaults to a single space.</param>
            <exception cref="T:System.Exception">Thrown if the string does not contain exactly three components or cannot be parsed.</exception>
        </member>
        <member name="P:Autodesk.Geometry.Vector.I">
            <summary>
            Magnitude of the vector in the first axis (X)
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Vector.J">
            <summary>
            Magnitude of the vector in the second axis (Y)
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Vector.K">
            <summary>
            Magnitude of the vector in the third axis (Z)
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Vector.Magnitude">
            <summary>
            Magnitude of the vector.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Vector.MagnitudeSquare">
            <summary>
            Magnitude square of the vector.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Vector.op_Addition(Autodesk.Geometry.Vector,Autodesk.Geometry.Vector)">
            <summary>
            Performs vector addition on its two operands.
            </summary>
            <param name="left">First vector to add.</param>
            <param name="right">Second vector to add.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.op_Subtraction(Autodesk.Geometry.Vector,Autodesk.Geometry.Vector)">
            <summary>
            Subtracts the right-hand of the two specified vectors from the left.
            </summary>
            <param name="left">Vector from which to subtract (minuend).</param>
            <param name="right">Vector to subtract (subtrahend).</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.op_Multiply(Autodesk.Geometry.Vector,System.Double)">
            <summary>
            Multiplies a Vector by a scalar.
            </summary>
            <param name="left">Vector to multiply.</param>
            <param name="scalar">Scalar value with which to multiply vector.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.op_Multiply(System.Double,Autodesk.Geometry.Vector)">
            <summary>
            Multiplies a Vector by a scalar.
            </summary>
            <param name="scalar">Scalar value with which to multiply vector.</param>
            <param name="right">Vector to multiply.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.op_Division(Autodesk.Geometry.Vector,System.Double)">
            <summary>
            Divides a vector by a scalar value.
            </summary>
            <param name="left">Vector to be divided.</param>
            <param name="scalar">Dividing scalar.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.DotProduct(Autodesk.Geometry.Vector,Autodesk.Geometry.Vector)">
            <summary>
            Calculates the dot product of the two specified vectors.
            If both vectors are unit vectors, the dot product will be the cosine of the angle between them.
            If only b is a unit vector, the dot product will yield the signed magnitude of the projection
            of a on b.
            </summary>
            <param name="a">First of two vectors.</param>
            <param name="b">Second of two vectors.</param>
            <returns>Scalar result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Vector.CrossProduct(Autodesk.Geometry.Vector,Autodesk.Geometry.Vector)">
            <summary>
            Calculates the cross product of the two specified vectors.
            The resultant vector is perpendicular to both a and b, the two vectors used to produce it,
            with vector a corresponding to the X axis and b the Y.
            </summary>
            <param name="a">First input vector.</param>
            <param name="b">Second input vector.</param>
            <returns>Vector result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Vector.op_Inequality(Autodesk.Geometry.Vector,Autodesk.Geometry.Vector)">
            <summary>
            Returns true if the two specified vectors are not equal; false otherwise.
            </summary>
            <param name="left">First of two vectors.</param>
            <param name="right">Second of two vectors.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.op_Equality(Autodesk.Geometry.Vector,Autodesk.Geometry.Vector)">
            <summary>
            Returns true if the two specified vectors are equal; false otherwise.
            </summary>
            <param name="left">First of two vectors.</param>
            <param name="right">Second of two vectors.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.AngleBetween(Autodesk.Geometry.Vector)">
            <summary>
            Returns the angle between this and a second vector.
            </summary>
            <param name="otherVector">Vector with which to measure angle.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.AngleTo(Autodesk.Geometry.Vector)">
            <summary>
            Returns the angle from this vector to another.
            </summary>
            <param name="otherVector">Second vector against which to measure angle.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.Normalize">
            <summary>
            Normalises this vector.
            </summary>
            <exception cref="T:System.Exception">Thrown if this is of zero length: a zero length vector cannot be converted to a unit vector.</exception>
        </member>
        <member name="M:Autodesk.Geometry.Vector.RebaseFromWorkplane(Autodesk.Geometry.Workplane)">
            <summary>
            Rebases this vector from a specified workplane to the world.
            </summary>
            <param name="fromWorkplane">Workplane from which to rebase vector.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.RebaseToWorkplane(Autodesk.Geometry.Workplane)">
            <summary>
            Rebases this vector to the specified workplane.
            </summary>
            <param name="toWorkplane">Workplane to rebase to.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.RotateAboutVector(Autodesk.Geometry.Vector,Autodesk.Geometry.Radian)">
            <summary>
            Rotates this Vector by the specified angle in radians about the specified vector.
            </summary>
            <param name="vectorToRotateAbout">Vector to rotate about.</param>
            <param name="angle">Angle to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.RotateAboutXAxis(Autodesk.Geometry.Radian)">
            <summary>
            Rotates this Vector by the specified angle in Radians about X.
            </summary>
            <param name="angle">Angle to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.RotateAboutYAxis(Autodesk.Geometry.Radian)">
            <summary>
            Rotates this Vector by the specified angle in Radians about Y.
            </summary>
            <param name="angle">Angle to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.RotateAboutZAxis(Autodesk.Geometry.Radian)">
            <summary>
            Rotates this Vector by the specified angle in Radians about Z.
            </summary>
            <param name="angle">Angle to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.EulerRotation(Autodesk.Geometry.Euler.Angles)">
            <summary>
            Rotates the Vector by the specified Euler Angles.
            </summary>
            <param name="eulerAngles">Angles to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.GetXYVectors(Autodesk.Geometry.Vector@,Autodesk.Geometry.Vector@)">
            <summary>
            Sets the xVector parameter to be the size of this in the X axis and the yVector parameter to be the size of this in the Y axis.
            </summary>
            <param name="xVector">Vector to populate as X.</param>
            <param name="yVector">Vector to populate as Y.</param>
        </member>
        <member name="M:Autodesk.Geometry.Vector.Equals(System.Object)">
            <summary>
            Returns True if this Vector is equal to the specified object. I.e. all three axes are equivalent.
            </summary>
            <param name="obj">Object to compare against.</param>
            <returns>True if vector and object are equivalent; false otherwwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Vector.Equals(System.Object,System.Int32)">
            <summary>
            Returns true if the Vector is equal to the specified object with at least the specified precision. If the the object is not a Vector
            or is not equivalent to the Vector, the operation returns False.
            </summary>
            <param name="obj">Object to comare against.</param>
            <param name="nDecPts">Number of decimal places to compare.</param>
            <returns>True if the operands are deemed equal.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Vector.ToString">
            <summary>
            Returns a string representation of the Vector of the form: I.IIII J.JJJ K.KKK
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Vector.Clone">
            <summary>
            Returns a clone of this Vector.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.Workplane">
            <summary>
            Encapsulates a Workplane. A workplane consists of three vectors that describe the orientation of a
            model in respect to the world.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Workplane._origin">
            <summary>
            Origin of the Workplane.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Workplane._xAxis">
            <summary>
            This is the X Axis of the Workplane
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Workplane._yAxis">
            <summary>
            This is the Y Axis of the Workplane
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Workplane._zAxis">
            <summary>
            This is the Z Axis of the Workplane
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.#ctor">
            <summary>
            Constructor a workplane to match the orientation of the world.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Vector,Autodesk.Geometry.Vector,Autodesk.Geometry.Vector)">
            <summary>
            Constructs a workplane with orientation relative to the world using the specified values.
            </summary>
            <param name="origin">Origin of the coordinate system.</param>
            <param name="xAxis">Vector representing the X axis.</param>
            <param name="yAxis">Vector representing the Y axis.</param>
            <param name="zAxis">Vector representing the Z axis.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Vector,Autodesk.Geometry.Vector)">
            <summary>
            Constructs workplane from two vectors and point
            </summary>
            <param name="origin">Origin of the coordinate system.</param>
            <param name="xAxis">Vector representing the X axis.</param>
            <param name="yAxis">Vector representing the Y axis.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.CheckIfVectorsArePerpendicular(Autodesk.Geometry.Vector,Autodesk.Geometry.Vector)">
            <summary>
            Check if vectors are roughly perpendicular. Throw exception if they are not.
            </summary>
            <param name="xAxis">Vector representing the first axis.</param>
            <param name="yAxis">Vector representing the second axis.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.#ctor(Autodesk.FileSystem.File)">
            <summary>
            Creates workplane from MAT, a TRX or a MATRIX file.
            </summary>
            <param name="file">The file to create the workplane from.</param>
        </member>
        <member name="P:Autodesk.Geometry.Workplane.Origin">
            <summary>
            Workplane origin.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Workplane.XAxis">
            <summary>
            Vector representing the workplane in X.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Workplane.YAxis">
            <summary>
            Vector representing the workplane in Y.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.Workplane.ZAxis">
            <summary>
            Vector representing the workplane in Z.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.Move(Autodesk.Geometry.Vector)">
            <summary>
            Moves the workplane by the specified Vector.
            </summary>
            <param name="offset">Vector by which to offset workplane.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.RotateAboutXAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates workplane by the specified angle about the X axis and the specified origin.
            </summary>
            <param name="origin">Origin of rotation.</param>
            <param name="angle">Angle through which to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.RotateAboutYAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates workplane by the specified angle about the Y axis and the specified origin.
            </summary>
            <param name="origin">Origin of rotation.</param>
            <param name="angle">Angle through which to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.RotateAboutZAxis(Autodesk.Geometry.Point,Autodesk.Geometry.Radian)">
            <summary>
            Rotates workplane by the specified angle about the Z axis and the specified origin.
            </summary>
            <param name="origin">Origin of rotation.</param>
            <param name="angle">Angle through which to rotate.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.GetTransformationMatrix">
            <summary>
            Gets Transformation Matrix from workplane.
            </summary>
            <returns>Returns the Transformation Matrix.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.Clone">
            <summary>
            Returns a clone of this Workplane.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.WriteToMat(Autodesk.FileSystem.File)">
            <summary>
            Writes workplane to MAT file.
            </summary>
            <param name="matFile">MAT file path.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.WriteToTrx(Autodesk.FileSystem.File)">
            <summary>
            Writes workplane to TRX file.
            </summary>
            <param name="trxFile">TRX file path.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.WriteToMatrix(Autodesk.FileSystem.File)">
            <summary>
            Writes workplane to a MATRIX file.
            </summary>
            <param name="matrixFile">The file path to the '.matrix' file.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.GetRotationMatrixAndTranslationFromMatFile(Autodesk.FileSystem.File)">
            <summary>
            Creates a transformation matrix from a MAT file.
            </summary>
            <param name="matFile">The MAT file.</param>
            <returns>The transformation matrix.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.GetRotationMatrixAndTranslationFromTrxFile(Autodesk.FileSystem.File)">
            <summary>
            Creates a transformation matrix from a TRX file.
            </summary>
            <param name="trxFile">The TRX file.</param>
            <returns>The transformation matrix.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.GetRotationMatrixAndTranslationFromMatrixFile(Autodesk.FileSystem.File)">
            <summary>
            Gets rotation and transformation matrix from a MATRIX file.
            </summary>
            <param name="matrixFile">The MATRIX file.</param>
            <returns>The transformation matrix.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.WriteRotationMatrixAndTranslationToMatFile(Autodesk.FileSystem.File,System.Double[0:,0:],System.Double[])">
            <summary>
            Writes the transformation matrix to a mat file.
            </summary>
            <param name="matFile">The MAT file to write.</param>
            <param name="rotationMatrix">The rotation matrix.</param>
            <param name="translation">The translation matrix.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.WriteRotationMatrixAndTranslationToTrxFile(Autodesk.FileSystem.File,System.Double[0:,0:],System.Double[])">
            <summary>
            Writes the transformation matrix to a TRX file.
            </summary>
            <param name="trxFile">The TRX file to write.</param>
            <param name="rotationMatrix">The rotation matrix.</param>
            <param name="translation">The translation matrix.</param>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.IsAMatFile(Autodesk.FileSystem.File)">
            <summary>
            Checks if it is a MAT file.
            </summary>
            <param name="file">The file to be tested.</param>
            <returns>True if it is a MAT file, false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.IsATrxFile(Autodesk.FileSystem.File)">
            <summary>
            Checks if it is a TRX file.
            </summary>
            <param name="file">The file to be tested.</param>
            <returns>True if it is a TRX file, false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Workplane.IsAMatrixFile(Autodesk.FileSystem.File)">
            <summary>
            Checks if it is a Matrix file. A file ending with '.matrix' is a custom file format created to be able to load a workplane from a file describing a transformation matrix.
            </summary>
            <param name="file">File with the transformation matrix.</param>
            <returns>True if it is a Matrix file, false otherwise.</returns>
        </member>
        <member name="T:Autodesk.Geometry.Inch">
            <summary>
            Encapsulates length measured in inches and the operations thereon.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.Inch._length">
            <summary>
            This is the actual value of the length
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Inch.#ctor(System.Double)">
            <summary>
            Constructs an Inch object and initialises it to the specified length.
            </summary>
            <param name="length">Initial value of the structure.</param>
        </member>
        <member name="P:Autodesk.Geometry.Inch.Value">
            <summary>
            Length in Inches.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Addition(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Returns the sum ot two Inch objects.
            </summary>
            <param name="left">Left value to sum.</param>
            <param name="right">Right value to sum.</param>
            <returns>Sum of the two Inch operands.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Subtraction(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Subtracts one Inch object from another.
            </summary>
            <param name="left">Object from which to subtract (minuend).</param>
            <param name="right">Object to subtract (subtrahend).</param>
            <returns>Inch object containing the result.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Multiply(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Multiplies two Inch objects together.
            </summary>
            <param name="left">First of two Inch objects.</param>
            <param name="right">Second of two Inch objects.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Multiply(System.Double,Autodesk.Geometry.Inch)">
            <suInchary>
            Multiplies a Inch by a double.
            </suInchary>
            <param name="left">A dobule scalar.</param>
            <param name="right">The Inch object.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Multiply(Autodesk.Geometry.Inch,System.Double)">
            <suInchary>
            Multiplies a Inch by a double.
            </suInchary>
            <param name="left">The Inch object.</param>
            <param name="right">A dobule scalar.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Division(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Divides one Inch object by another.
            </summary>
            <param name="left">Inch object to divide (dividend).</param>
            <param name="right">Inch object to divide with (divisor).</param>
            <returns>Quotient resulting from the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Division(Autodesk.Geometry.Inch,System.Double)">
            <suInchary>
            Divide the left-hand Inch object by a double.
            </suInchary>
            <param name="left">Inch object to divide (dividend).</param>
            <param name="right">Double to divide by (divisor).</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_UnaryNegation(Autodesk.Geometry.Inch)">
            <summary>
            Negates the Inch object to the right of the operator.
            </summary>
            <param name="right">Inch object to negate.</param>
            <returns>Inch object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_LessThan(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Determines whether one Inch object is less than another.
            </summary>
            <param name="left">First Inch object.</param>
            <param name="right">Second Inch object.</param>
            <returns>True if the left-hand Inch object is less than the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_GreaterThan(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Determines whether one Inch object is greater than another.
            </summary>
            <param name="left">First Inch object.</param>
            <param name="right">Second Inch object.</param>
            <returns>True if the left-hand Inch object is greater than the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_LessThanOrEqual(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Determines whether one Inch object is less than or equal to another.
            </summary>
            <param name="left">First Inch object.</param>
            <param name="right">Second Inch object.</param>
            <returns>True if the left-hand Inch object is less than or equal to the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_GreaterThanOrEqual(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Determines whether one Inch object is greater than or equal to another.
            </summary>
            <param name="left">First Inch object.</param>
            <param name="right">Second Inch object.</param>
            <returns>True if the left-hand Inch object is greater than or equal to the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Equality(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Compares two Inch objects for equivalence and returns true if they are within
            one 100,000th of an inch.
            </summary>
            <param name="left">First of two Inch objects.</param>
            <param name="right">Second of two Inch objects.</param>
            <returns>True if the operands are considered equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Inequality(Autodesk.Geometry.Inch,Autodesk.Geometry.Inch)">
            <summary>
            Compares two Inch objects and returns True if the difference between them
            is greater than one 100,000th of an inch. I.e. they are unequal.
            </summary>
            <param name="left">First of two Inch objects.</param>
            <param name="right">Second of two Inch objects.</param>
            <returns>True if the operands are considered unequal; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Explicit(Autodesk.Geometry.Inch)~System.Double">
            <summary>
            Casts an Inch object to Double.
            </summary>
            <param name="left">Inch object to cast.</param>
            <returns>Double representation of the Inch object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Explicit(Autodesk.Geometry.Inch)~System.Single">
            <summary>
            Casts an Inch object to Single.
            </summary>
            <param name="left">Inch object to cast.</param>
            <returns>Single representation of the Inch object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Explicit(Autodesk.Geometry.Inch)~System.Decimal">
            <summary>
            Casts an Inch object to Decimal.
            </summary>
            <param name="left">Inch object to cast.</param>
            <returns>Decimal representation of the Inch object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Implicit(Autodesk.Geometry.MM)~Autodesk.Geometry.Inch">
            <summary>
            Casts a MM (millimetre) object to an Inch object.
            </summary>
            <param name="left">MM object to cast.</param>
            <returns>New Inch object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.op_Implicit(System.Double)~Autodesk.Geometry.Inch">
            <summary>
            Casts a Double to an Inch object.
            </summary>
            <param name="left">Double to be cast.</param>
            <returns>New Inch object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.ToString">
            <summary>
            Returns the value of this object as a string.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.Inch.ToString(System.String)">
            <summary>
            Returns the value of this object as a formatted string.
            </summary>
            <param name="format">Standard format specifier with which to format the string.</param>
        </member>
        <member name="M:Autodesk.Geometry.Inch.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the value of this object in its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">Standard numeric format specifier.</param>
            <param name="fp">Custom object implementing the IFormatProvider interface.</param>
        </member>
        <member name="M:Autodesk.Geometry.Inch.Equals(System.Object)">
            <summary>
            Returns True if the magnitude of this object is equivalent to that of the specified object.
            If the specified object is neither of type MM or Inch, false will be returned.
            </summary>
            <param name="obj">Object with which to compare this.</param>
            <returns>True if the magnitudes of this and the specified object are equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.Inch.Equals(System.Object,System.Int32)">
            <summary>
            Returns True if the magnitude of this object is equivalent to that of the specified object to the specified number of decimal places.
            If the specified object is neither of type MM or Inch, false will be returned.
            </summary>
            <param name="obj">Object with which to compare this.</param>
            <param name="nDecPts">Number of decimal places to compare.</param>
            <returns>True if the magnitudes of this and the specified object are considered equivalent; false otherwise.</returns>
        </member>
        <member name="T:Autodesk.Geometry.MM">
            <summary>
            Encapsulates length measured in millimetres and the operations thereon.
            </summary>
        </member>
        <member name="F:Autodesk.Geometry.MM._length">
            <summary>
            This is the actual length in MM
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MM.#ctor(System.Double)">
            <summary>
            Constructs an MM object and initialises it to the specified length.
            </summary>
            <param name="length">Initial value of the structure.</param>
        </member>
        <member name="P:Autodesk.Geometry.MM.Value">
            <summary>
            Length in MM.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Addition(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Returns the sum of two MM objects.
            </summary>
            <param name="left">Left value to sum.</param>
            <param name="right">Right value to sum.</param>
            <returns>Sum of the two MM operands.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Addition(Autodesk.Geometry.MM,System.Int32)">
            <summary>
            Adds an <see cref="T:Autodesk.Geometry.MM"/> and a <see cref="T:System.Int32"/>.
            </summary>
            <param name="left">Left value to sum.</param>
            <param name="right">Right value to sum.</param>
            <returns>Sum of the add operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Addition(System.Int32,Autodesk.Geometry.MM)">
            <summary>
            Adds a <see cref="T:System.Int32"/> and an <see cref="T:Autodesk.Geometry.MM"/>.
            </summary>
            <param name="left">Left value to sum.</param>
            <param name="right">Right value to sum.</param>
            <returns>Sum of the add operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Subtraction(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Subtracts one MM object from another.
            </summary>
            <param name="left">Object from which to subtract (minuend).</param>
            <param name="right">Object to subtract (subtrahend).</param>
            <returns>MM object containing the result.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Subtraction(Autodesk.Geometry.MM,System.Int32)">
            <summary>
            Subtracts a <see cref="T:System.Int32"/> from one <see cref="T:Autodesk.Geometry.MM"/> object.
            </summary>
            <param name="left">Object from which to subtract (minuend).</param>
            <param name="right">Object to subtract (subtrahend).</param>
            <returns>MM object containing the result.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Subtraction(System.Int32,Autodesk.Geometry.MM)">
            <summary>
            Subtracts one <see cref="T:Autodesk.Geometry.MM"/> object from a <see cref="T:System.Int32"/>.
            </summary>
            <param name="left">Object from which to subtract (minuend).</param>
            <param name="right">Object to subtract (subtrahend).</param>
            <returns>MM object containing the result.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Multiply(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Multiplies two MM objects together.
            </summary>
            <param name="left">First of two MM objects.</param>
            <param name="right">Second of two MM objects.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Multiply(System.Double,Autodesk.Geometry.MM)">
            <summary>
            Multiplies a MM by a double.
            </summary>
            <param name="left">A dobule scalar.</param>
            <param name="right">The MM object.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Multiply(Autodesk.Geometry.MM,System.Double)">
            <summary>
            Multiplies a MM by a double.
            </summary>
            <param name="left">The MM object.</param>
            <param name="right">A dobule scalar.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Multiply(System.Int32,Autodesk.Geometry.MM)">
            <summary>
            Multiplies a <see cref="T:Autodesk.Geometry.MM"/> by a <see cref="T:System.Double"/>.
            </summary>
            <param name="left">A int scalar.</param>
            <param name="right">The MM object.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Multiply(Autodesk.Geometry.MM,System.Int32)">
            <summary>
            Multiplies a <see cref="T:Autodesk.Geometry.MM"/> by a <see cref="T:System.Int32"/>.
            </summary>
            <param name="left">The MM object.</param>
            <param name="right">A int scalar.</param>
            <returns>Product of the multiplication.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Division(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Divide the left-hand MM object by the right.
            </summary>
            <param name="left">MM object to divide (dividend).</param>
            <param name="right">MM object to divide with (divisor).</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Division(Autodesk.Geometry.MM,System.Double)">
            <summary>
            Divide the left-hand MM object by a double.
            </summary>
            <param name="left">MM object to divide (dividend).</param>
            <param name="right">Double to divide by (divisor).</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Division(Autodesk.Geometry.MM,System.Int32)">
            <summary>
            Divide the left-hand <see cref="T:Autodesk.Geometry.MM"/> object by a <see cref="T:System.Int32"/>.
            </summary>
            <param name="left">MM object to divide (dividend).</param>
            <param name="right">Int to divide by (divisor).</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Division(System.Int32,Autodesk.Geometry.MM)">
            <summary>
            Divide the left-hand <see cref="T:System.Int32"/> object by a <see cref="T:Autodesk.Geometry.MM"/>.
            </summary>
            <param name="left">Int to divide (dividend).</param>
            <param name="right">MM object to divide by (divisor).</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_UnaryNegation(Autodesk.Geometry.MM)">
            <summary>
            Negates the MM object to the right of the operator.
            </summary>
            <param name="right">MM object to negate.</param>
            <returns>MM object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_LessThan(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Determines whether one MM object is less than another.
            </summary>
            <param name="left">First MM object.</param>
            <param name="right">Second MM object.</param>
            <returns>True if the left-hand MM object is less than the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_GreaterThan(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Determines whether one MM object is greater than another.
            </summary>
            <param name="left">First MM object.</param>
            <param name="right">Second MM object.</param>
            <returns>True if the left-hand MM object is greater than the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_LessThanOrEqual(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Determines whether one MM object is less than or equal to another.
            </summary>
            <param name="left">First MM object.</param>
            <param name="right">Second MM object.</param>
            <returns>True if the left-hand MM object is less than or equal to the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_GreaterThanOrEqual(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Determines whether one MM object is greater than or equal to another.
            </summary>
            <param name="left">First MM object.</param>
            <param name="right">Second MM object.</param>
            <returns>True if the left-hand MM object is greater than or equal to the right; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Equality(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Returns True if the two specified MM objects are equal.
            </summary>
            <param name="left">First of two MM objects.</param>
            <param name="right">Second of two MM objects.</param>
            <returns>True if the operands are equivalent in magnitude; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Inequality(Autodesk.Geometry.MM,Autodesk.Geometry.MM)">
            <summary>
            Compares two MM objects and returns True if they are unequal.
            </summary>
            <param name="left">First of two MM objects.</param>
            <param name="right">Second of two MM objects.</param>
            <returns>True if the operands are unequal in magnitude; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Addition(Autodesk.Geometry.MM,System.String)">
            <summary>
            Returns the string result of concatenating the string representation of the specified MM object with the specified string.
            The MM object is added to the result first.
            </summary>
            <param name="left">First of two operands.</param>
            <param name="right">Second of two operands.</param>
            <returns>Result of the concatenation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Addition(System.String,Autodesk.Geometry.MM)">
            <summary>
            Returns the result of concatenating the specified string with the string representation of the specified MM object.
            The specified string is added to the result first.
            </summary>
            <param name="left">First of two operands.</param>
            <param name="right">Second of two operands.</param>
            <returns>Result of the concatenation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Implicit(Autodesk.Geometry.MM)~System.Double">
            <summary>
            Casts an MM object to a Double.
            </summary>
            <param name="left">MM object to cast.</param>
            <returns>Double representation of the MM object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Explicit(Autodesk.Geometry.MM)~System.Single">
            <summary>
            Casts an MM object to Single.
            </summary>
            <param name="left">MM object to cast.</param>
            <returns>Single representation of the MM object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Explicit(Autodesk.Geometry.MM)~System.Decimal">
            <summary>
            Casts an MM object to Decimal.
            </summary>
            <param name="left">MM object to cast.</param>
            <returns>Decimal representation of the MM object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Explicit(Autodesk.Geometry.MM)~System.Int32">
            <summary>
            Casts an MM object to int.
            </summary>
            <param name="left">MM object to cast.</param>
            <returns>Decimal representation of the MM object.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Implicit(Autodesk.Geometry.Inch)~Autodesk.Geometry.MM">
            <summary>
            Casts an Inch object to a MM object.
            </summary>
            <param name="left">Inch object to cast.</param>
            <returns>New MM object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.op_Implicit(System.Double)~Autodesk.Geometry.MM">
            <summary>
            Casts a Double to an MM object.
            </summary>
            <param name="left">Double to be cast.</param>
            <returns>New MM object containing the result of the operation.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.ToString">
            <summary>
            Returns the value of this object as a string.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MM.ToString(System.String)">
            <summary>
            Returns the value of this object as a formatted string.
            </summary>
            <param name="format">Standard format specifier with which to format the string.</param>
        </member>
        <member name="M:Autodesk.Geometry.MM.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns the value of this object in its equivalent string representation using the specified format and culture-specific format information.
            </summary>
            <param name="format">Standard numeric format specifier.</param>
            <param name="fp">Custom object implementing the IFormatProvider interface.</param>
        </member>
        <member name="M:Autodesk.Geometry.MM.Equals(System.Object)">
            <summary>
            Returns True if the magnitude of this object is equivalent to that of the specified object.
            If the specified object is neither of type MM or Inch, false will be returned.
            </summary>
            <param name="obj">Object with which to compare this.</param>
            <returns>True if the magnitudes of this and the specified object are equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.Equals(System.Object,System.Int32)">
            <summary>
            Returns True if the magnitude of this object is equivalent to that of the specified object to the specified number of decimal places.
            If the specified object is neither of type MM or Inch, false will be returned.
            </summary>
            <param name="obj">Object with which to compare this.</param>
            <param name="nDecPts">Number of decimal places to compare.</param>
            <returns>True if the magnitudes of this and the specified object are considered equivalent; false otherwise.</returns>
        </member>
        <member name="M:Autodesk.Geometry.MM.CompareTo(System.Object)">
            <summary>
            Required for MM to implement IComparable.
            </summary>
            <param name="obj">Object to compare.</param>
            <exception cref="T:System.ArgumentException">Thrown if the object to compare is not of type MM.</exception>
        </member>
        <member name="M:Autodesk.Geometry.ArcFunctions.GetCentreFromPointsAndRadius(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.MM,Autodesk.Planes)">
            <summary>
            Returns two possible arc centres given two points on the arc, the plane of the arc and the arc radius.
            </summary>
            <param name="startPoint">First point on the arc.</param>
            <param name="endPoint">Second point on the arc.</param>
            <param name="radius">Radius of the arc.</param>
            <param name="plane">Plane of the arc.</param>
            <returns>List containing two possible arc centres.</returns>
        </member>
        <member name="M:Autodesk.Geometry.CurveFunctions.PolygoniseCubicCurve(Autodesk.Geometry.Point[],System.Double)">
            <summary>
            Polygonises a 2D cubic curve returning the points for the polyline.
            The cubic curve control points must be supplied in order, e.g.
            Anchor 1, Control 1a, Control 1b, Anchor 2, Control 2a, Control 2b, Anchor 3
            </summary>
            <history>
            Who     When      What
            ----- ---------- ---------------------------------------------------
            DAL  23/11/2006  Written
            </history>
        </member>
        <member name="M:Autodesk.Geometry.CurveFunctions.SplicePointArray(Autodesk.Geometry.Point[]@,System.Int32,System.Int32)">
            <summary>
            Returns 2D points from an array by the specified Offset, and Length.
            The original array has the extracted points removed from it.
            </summary>
            <history>
            Who     When      What
            ----- ---------- ---------------------------------------------------
            DAL  23/11/2006  Written
            </history>
        </member>
        <member name="M:Autodesk.Geometry.CurveFunctions.GetPolyPointsForCubicSpan(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point,System.Double)">
            <summary>
            Returns the points that polygonise a single cubic curve span to the specified squared tolerance.
            </summary>
            <history>
            Who     When      What
            ----- ---------- ---------------------------------------------------
            DAL  23/11/2006  Written
            </history>
        </member>
        <member name="M:Autodesk.Geometry.CurveFunctions.DivideCubicSpan(Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point,Autodesk.Geometry.Point,System.Double)">
            <summary>
            divides one segment of the cubic bezier curve at ratio "sep", and returns
            the new cubic bezier which has two segment (7 points).
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.MSRFile">
            <summary>
            Performs read and write operations on MSR files.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.MSRFile.PointData">
            <summary>
            Encapsulates data for each point.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.PointData.#ctor">
            <summary>
            Constructs a PointData object with default values.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.PointData.#ctor(Autodesk.Geometry.Point,Autodesk.Geometry.Vector,System.Double,System.Double,System.Double,System.Double,Autodesk.Geometry.Point,Autodesk.Geometry.MM)">
            <summary>
            Constructs a PointData object with the specified values.
            </summary>
            <param name="nominalSurfacePoint">Nominal point on the surface to be probed.</param>
            <param name="surfaceNormal">Vector normal to the surface at nominalSurfacePoint.</param>
            <param name="surfaceOffset">Expected offset of the point from the ideal.</param>
            <param name="upperTolerance">Upper permissible offset tolerance.</param>
            <param name="lowerTolerance">Lower permissible offset tolerance.</param>
            <param name="weight">Relative importance of this point in the model.</param>
            <param name="probeCentre">Probe centre on measurement.</param>
            <param name="probeRadius">Probe radius in millimetres.</param>
            <remarks></remarks>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.PointData.ApplyMatrix(Autodesk.Geometry.Euler.Angles)">
            <summary>
            This operation applies the specified EulerAngles to the PointData
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.PointData.CalculateMeasuredSurfacePoint">
            <summary>
            This operation calculates the MeasuredSurfacePoint from the probe data.  Before running this
            operation the data should be rotated by the EulerAngles if appropriate
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.PointNumber">
            <summary>
            Number of the point in the file.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.NominalSurfacePoint">
            <summary>
            Nominal position of the PointData.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.SurfaceNormal">
            <summary>
            Normal to the surface at the nominal point.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.SurfaceOffset">
            <summary>
            Expected manufactured offset from the nominal point.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.UpperTolerance">
            <summary>
            Upper permissible tolerance.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.LowerTolerance">
            <summary>
            Lower permissible tolerance.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.ProbeCentre">
            <summary>
            Probe centre.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.ProbeRadius">
            <summary>
            Probe radius.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.MeasuredSurfacePoint">
            <summary>
            Position of point as probed.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.Variation">
            <summary>
            Distance between measured surface point and nominal surface point. A more accurate value is provided by the VariationProjectedToSurfaceNormal property.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.PointData.VariationProjectedToSurfaceNormal">
            <summary>
            Distance between measured surface point and nominal surface point projected onto the surface normal to give the variation and ignoring cosine error.
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs an MSRFile object and populates it with points from the specified file.
            </summary>
            <param name="filePath">Path to the .msr file.</param>
            <param name="anglesInDegrees">Specifies whether the angles in a G330 line are in degrees (default) or radians</param>
            .
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.#ctor(System.String,System.Collections.Generic.List{Autodesk.Geometry.MSRFile.PointData})">
            <summary>
            Constructs a new file with the specified path and filename and copies
            to it the specified list of points.
            </summary>
            <param name="filePathToCreate">Path to the new file.</param>
            <param name="pointData">List of points to be included in the file.</param>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.ReadFile(System.Boolean)">
            <summary>
            Reads point data from the specified file and stores it in the object.
            </summary>
            <param name="anglesInDegrees">Specifies whether the angles in a G330 line are in degrees or radians (default).</param>
            <exception cref="T:System.Exception">
            Thrown for any of the following reasons:<br></br><br></br>
            Multiple control characters found for a single point.<br></br>Point has no corresponding G801 line in MSR file.<br></br>
            Missing G800 line in MSR file after parsing points.<br></br>No points found in MSR file.
            </exception>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.IsControlChar(System.Char)">
            <summary>
            This operation determines if the character is a control character
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.StoreValue800(Autodesk.Geometry.MSRFile.PointData@,System.Char,System.String)">
            <summary>
            This operation stores the G800 line values in the PointData object passed in
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.StoreValue801(Autodesk.Geometry.MSRFile.PointData@,System.Char,System.String)">
            <summary>
            This operation stores the G801 line values in the PointData object passed in
            </summary>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.WriteFile(System.String)">
            <summary>
            Writes detransformed data (see ToString) to the specified file.
            </summary>
            <param name="filePath">Path and filename of destination file.</param>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.ToString">
            <summary>
            Returns to the caller a string containing the contents of this object.<br></br><br></br> E.g.<br></br><br></br>
            START<br></br>
            G800 N1 X-86.807 Y-7.998 Z242.112 I0.894 J-0.241 K0.377 O0 U0.1 L-0.1<br></br>
            G801 N1 X-85.466 Y-8.36 Z242.678 R1.5
            </summary>
            <returns>The file's PointData as a string</returns>
        </member>
        <member name="M:Autodesk.Geometry.MSRFile.op_Addition(Autodesk.Geometry.MSRFile,Autodesk.Geometry.MSRFile)">
            <summary>
            Appends two MSR files
            </summary>
            <param name="firstMSRFile">First MSR file to append.</param>
            <param name="secondMSRFile">Second MSR file to append.</param>
            <returns>List of the combined pointData.</returns>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.Points">
            <summary>
            File's point data.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.MSRFile.HeaderLines">
            <summary>
            File headers.
            </summary>
        </member>
        <member name="T:Autodesk.Geometry.My.Resources.Resources">
            <summary>
            A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.My.Resources.Resources.ResourceManager">
            <summary>
            Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autodesk.Geometry.My.Resources.Resources.Culture">
            <summary>
            Overrides the current thread's CurrentUICulture property for all
            resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Autodesk.Matrix.Matrix">
            <summary>
            Contains Matrix helper methods.
            </summary>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.Create(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a matrix of a given size with a default value.
            </summary>
            <param name="numberOfRows">The number of rows.</param>
            <param name="numberOfColumns">The number of columns.</param>
            <param name="value">The default value for each matrix element.</param>
            <returns>Returns the matrix.</returns>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.Identity(System.Int32)">
            <summary>
            Creates an Identity matrix.
            </summary>
            <param name="size">The size of the Identity matrix.</param>
            <returns>The Identity matrix.</returns>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.Add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Adds the current matrix (a) to matrix b.
            </summary>
            <param name="a">The current matrix.</param>
            <param name="b">Matrix to add.</param>
            <returns>The sum of matrix the current matrix and matrix b.</returns>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.Multiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Multiplies the current matrix (a) by b.
            </summary>
            <param name="a">The current matrix.</param>
            <param name="b">The matrix to multiply by.</param>
            <returns>The multiplication of matrix the current matrix by matrix b.</returns>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.Multiply(System.Double[0:,0:],System.Double)">
            <summary>
            Multiplies the current matrix (a) by b.
            </summary>
            <param name="a">The current matrix.</param>
            <param name="b">The number to multiply by.</param>
            <returns>The multiplication of matrix the current matrix by b.</returns>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.Multiply(System.Double[0:,0:],System.Double[])">
            <summary>
            Multiplies the current matrix (a) by column vector.
            </summary>
            <param name="a">The current matrix.</param>
            <param name="columnVector">The column vector to multiply by.</param>
            <returns>The multiplication of matrix the current matrix by b.</returns>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.HadamardProduct(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Hadamard product of the current matrix by b.
            </summary>
            <param name="a">The current matrix.</param>
            <param name="b">The matrix to multiply by.</param>
            <returns>The Hadamard product of the current matrix by b.</returns>
            <exception cref="T:System.ArgumentException">Thrown when matrices don't have the same dimensions.</exception>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.Copy(System.Double[0:,0:])">
            <summary>
            Copies matrix a.
            </summary>
            <param name="a">The matrix to copy from.</param>
            <returns>The new matrix copy.</returns>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.Subtract(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtracts matrix b to the current matrix (a).
            </summary>
            <param name="a">The current matrix.</param>
            <param name="b">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:Autodesk.Matrix.Matrix.Transpose(System.Double[0:,0:])">
            <summary>
            Gets the transpose of the matrix (a).
            </summary>
            <param name="a">The matrix to transpose from.</param>
            <returns>The transpose of the given matrix.</returns>
        </member>
    </members>
</doc>
